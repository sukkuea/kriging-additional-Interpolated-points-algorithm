{"version":3,"sources":["Utils/createRangeTable.js","Utils/tranformSemivariance.js","Utils/getStatError.js","Utils/computePredict.js","Utils/separateNode.js","Utils/calBestAttitude.js","Utils/createMatrix.js","Utils/getXYZ.js","Utils/createScatterGraph.js","Utils/getTrendlines.js","components/ErrorTable.js","components/NodeResultTable.js","Utils/config.js","pages/Form.js","App.js","serviceWorker.js","actions/index.js","reducers/nodeList.js","reducers/user.js","reducers/index.js","reducers/addNodeResult.js","reducers/Predict.js","pages/Addnode.js","pages/ViewVariogram.js","Utils/calculateRMSEzone.js","components/ZoneTable.js","pages/ButtonGroupExportExcel.js","pages/NodeWithFourZone.js","pages/NodeWithNineZone.js","Utils/separateSixTeenZone.js","pages/NodeWithSixTeenZone.js","index.js"],"names":["createRangeTable","prod","arguments","length","undefined","reduce","acc","current","concat","Object","toConsumableArray","id","latitude","longtitude","attitude","range","next","Math","sqrt","pow","tranformSemivariance","node","NUGGET","SILL","RANGE","exponential","rangeValue","exp","linear","spherical","pentaspherical","gaussian","exponentialPolynomialTrendlines","exponentialConstant","calculateError","model","meanError","_ref","predictAttitude","meanOfPercentageError","_ref2","meanAbsoluteError","_ref3","abs","meanSquareError","_ref4","rootMeanSquareError","_ref5","getAllErrorModel","nodes","sherical","trendline","exponentialWithKIteration","exponentialWithConstant","computePredict","bestSumList","index","objectSpread","memoizeTransformSemiVarioGramWithSeparateNode","memoize","resultSelectedValiogram","tempSemiVarioGram","keys","temp","i","findCenter","tempX","tempY","_nodes$i","meanX","meanY","randomGenerator","xMax","xMin","yMax","yMin","idTemp","random","isGenerate","withGenerateZone","n","nodeLength","zone","variable","semiVarioGramHash","allNodeRangeHash","bestSumHash","memoizeCalCulateAttitude","lengthPerZone","ceil","zoneKeys","minAndMaxPerZone","latArr","map","lonArr","max","min","defineProperty","getMinMaxLatAndLon","semiVarioGramTemp","allRangeOfNodesTemp","newNode","selectedZone","generateZoneLength","_minAndMaxPerZone$i","j","push","_memoizeCalCulateAtti","bestSum","allRangeOfNodes","semiVarioGram","apply","trasnformNodesWithPredict","separateZone","center","zoneArray","0","1","2","3","_nodes$i2","numberLatitude","Number","numberLongtitude","separateNineZone","4","5","6","7","8","_nodes$i3","x","y","row","column","findMaxRange","v","calCulateAttitude","maxRange","data","calculateBestNuggetSillRange","error","minError","bestNugget","bestSill","bestRange","calBestAttitudeLastNode","vairiantNodeObject","A","array","prev","value","createMatrix","b","inverMatrix","math","inv","w","multiply","sum","errorPedictionModel","dotMultiply","nuggetArray","sillArray","sillFromExponent","nugget","sill","vairiantNodeObjectConstant","modelExponentialWithContant","modelGussian","modelSpherical","modelExponential","modelLinear","modelPentaSpherical","modelTrendline","_ref6","ExponentialVairiantWithSubSill","modelExponentialWithKIteration","_ref7","_ref8","_ref9","_ref10","_ref11","_ref12","_ref13","_ref14","_ref15","_ref16","getXYZ","key","getZ","createScatterGraph","name","scatterGraph","lengthSemi","slice","semi","mode","type","getTrendlines","nodeRange","semiVariant","result","ErrorTable","isHaveCalculateConstant","react_default","a","createElement","style","textAlign","NodeResultTable","list","modelList","display","buttonList","label","Form","state","z","loading","addNode","_this","setState","onChangeFile","e","file","target","files","reader","FileReader","onload","evt","bstr","wb","XLSX","wsname","SheetNames","ws","Sheets","sheet_to_json","header","shift","transformDataNode","readAsBinaryString","onChangeNode","_e$target","deleteNodes","nodeIdTarget","parseInt","updateDeleteNode","filter","onSubmit","_this$state","newNodesWithLastAttitude","lastPredictNode","handleChangeModel","labelModel","handleChangeValue","_e$target2","_this2","this","_this$state2","_this$state2$lastPred","_this$state2$bestSumL","_this$state2$model","trendlineData","slicedToArray","isDisabledSubmit","className","react_loader_spinner_default","color","height","width","margin","react_router_dom","marginRight","to","onClick","placeholder","onChange","toString","disabled","react_html_table_to_excel_default","table","filename","sheet","buttonText","Fragment","components_ErrorTable","components_NodeResultTable","react_plotly_default","layout","title","xaxis","yaxis","showscale","intensity","colorscale","colorbar","scene","aspectratio","zaxis","backgroundcolor","showbackground","zerolinecolor","gridcolor","nticks","contours","showlabels","labelfont","family","size","index_esm","chartType","options","legend","crosshair","trigger","orientation","trendlines","degree","visibleInLegend","vAxis","hAxis","legendToggle","Component","App","HandleChangeName","Handlealert","alert","react_router","path","exact","component","connect","store","nodesList","user","Boolean","window","location","hostname","match","BASE_URL","initialState","surname","parent","mother","brother","root","combineReducers","action","payload","nodeResult","Predict","Addnode","onChangeText","props","handleSumitNode","Variogram","dispatch","asyncToGenerator","regenerator_default","mark","_callee2","response","wrap","_context2","axios","post","sent","abrupt","stop","_x2","predict","variodId","zpredict","estimation","predictError","_callee3","_context3","_x3","addvariogram","RMSE","require","reduceParser","lookupTable","actual","getZoneRMSE","zones","groupModelExponential","groupModelExponentialConst","groupModelExponentialWithKIteration","groupModelGaussian","groupModelLinear","groupModelPentaspherical","groupModelSpherical","groupModelTrendlinel","errors","rmse","models","isShowConstant","ZoneBody","zoneNumber","zoneBodyData","nodeLookupTable","slopeList","inputSlope","errorAndSelectedModel","time","isLessThjanInputSlope","tempModel","hours","minutes","seconds","ZoneTable","_ref2$startTime","startTime","dayjs","_ref2$endTime","endTime","errorAndKeyEachZone","diff","getSlopeZone","nodesOfZone","attArr","maxLat","minlat","maxLon","minLon","slope","mean","isOnlyOneInZone","zoneBody","ZoneTable_ZoneBody","ButtonExportExel","onSlopeChange","memoizeWithGenerateZone","NodeWithSeparate","start","lastNodeId","_memoizeWithGenerateZ","sort","end","console","timeEnd","isAllNodeHavePredict","every","ButtonGroupExportExcel","components_ZoneTable","separateSixTeenZone","sixteenZone","arr","newCenter","newZone","values","NodeSixTeenZone","zoneFours","applyMiddleware","reduxThunk","createStore","createStoreWithMiddleware","reducers","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","NodeWithFourZone","NodeWithNineZone","NodeWithSixTeenZone","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0b4dac93.chunk.js","sourcesContent":["export default (prod = []) => {\n  return prod.reduce((acc, current) => {\n    return [\n      ...acc,\n      {\n        id: current.id,\n        latitude: current.latitude,\n        longtitude: current.longtitude,\n        attitude: current.attitude,\n        range: prod.reduce((acc, next) => {\n          return [\n            ...acc,\n            Math.sqrt(\n              Math.pow(current.latitude - next.latitude, 2) +\n                Math.pow(current.longtitude - next.longtitude, 2)\n            ),\n          ];\n        }, []),\n      },\n    ];\n  }, []);\n};\n","\nexport default (node = []) => (NUGGET, SILL, RANGE) =>\n  node.reduce((acc, current) => {\n    return [\n      ...acc, //round 1 [] //round 2[{id:1,x:1,y2,rage:[...value]}] rund 3 [{..},{..}]\n      {\n        latitude: current.latitude,\n        longtitude: current.longtitude,\n        attitude: current.attitude,\n        //  range:current.range,\n        exponential: current.range.reduce((acc, rangeValue) => {\n          //model exponential\n          if (acc.length === current.range.length - 1) {\n            return [...acc, 1];\n          } else if (rangeValue === 0) {\n            return [...acc, rangeValue];\n          } else {\n            return [\n              ...acc,\n              NUGGET + SILL * (1 - Math.exp(-rangeValue / RANGE)),\n            ];\n          }\n        }, []),\n        linear: current.range.reduce((acc, rangeValue) => {\n          if (acc.length === current.range.length - 1) {\n            return [...acc, 1];\n          } else if (rangeValue === 0) {\n            return [...acc, rangeValue];\n          } else {\n            return [...acc, NUGGET + SILL * (rangeValue / RANGE)];\n          }\n        }, []),\n        spherical: current.range.reduce((acc, rangeValue) => {\n          if (acc.length === current.range.length - 1) {\n            return [...acc, 1];\n          } else if (rangeValue === 0) {\n            return [...acc, rangeValue];\n          } else {\n            return [\n              ...acc,\n              NUGGET +\n              SILL *\n              ((3 * rangeValue) / (2 * RANGE) -\n                Math.pow(rangeValue / RANGE, 3) / 2),\n            ];\n          }\n        }, []),\n        pentaspherical: current.range.reduce((acc, rangeValue) => {\n          if (acc.length === current.range.length - 1) {\n            return [...acc, 1];\n          } else if (rangeValue === 0) {\n            return [...acc, rangeValue];\n          } else {\n            return [\n              ...acc,\n              NUGGET +\n              SILL *\n              ((15 * rangeValue) / (8 * RANGE) -\n                (5 / 4) * Math.pow(rangeValue / RANGE, 3) +\n                (3 / 8) * Math.pow(rangeValue / RANGE, 5)),\n            ];\n          }\n        }, []),\n        gaussian: current.range.reduce((acc, rangeValue) => {\n          if (acc.length === current.range.length - 1) {\n            return [...acc, 1];\n          } else if (rangeValue === 0) {\n            return [...acc, rangeValue];\n          } else {\n            return [\n              ...acc,\n              NUGGET +\n              SILL *\n              (1 -\n                Math.exp(\n                  (Math.pow(rangeValue, 2) / Math.pow(RANGE, 2)) * -1\n                )),\n            ];\n          }\n        }, []),\n        exponentialPolynomialTrendlines: current.range.reduce(\n          (acc, rangeValue) => {\n            if (acc.length === current.range.length - 1) {\n              return [...acc, 1];\n            } else if (rangeValue === 0) {\n              return [...acc, rangeValue];\n            } else {\n              return [\n                ...acc,\n                1.692 * Math.pow(rangeValue, 3) * Math.pow(10, -10) -\n                2.969 * Math.pow(rangeValue, 2) * Math.pow(10, -7) +\n                2.507 * rangeValue * Math.pow(10, -4) +\n                2.53 * Math.pow(10, -5),\n              ];\n            }\n          },\n          []\n        ),\n        exponentialConstant: current.range.reduce((acc, rangeValue) => {\n          //model exponential\n          if (acc.length === current.range.length - 1) {\n            return [...acc, 1];\n          } else if (rangeValue === 0) {\n            return [...acc, rangeValue];\n          } else {\n            return [\n              ...acc,\n              NUGGET + SILL * (1 - Math.exp(-rangeValue / RANGE)),\n            ];\n          }\n        }, []),\n      },\n    ];\n  }, []);\n","export const calculateError = (node = [], model = \"exponential\") => {\n  const meanError =\n    node.reduce((acc, { predictAttitude, attitude }) => {\n      return acc + (predictAttitude[model] - attitude);\n    }, 0) / node.length;\n\n  const meanOfPercentageError =\n    node.reduce((acc, { predictAttitude, attitude }) => {\n      return acc + (predictAttitude[model] - attitude) / attitude;\n    }, 0) / node.length;\n\n  const meanAbsoluteError =\n    node.reduce((acc, { predictAttitude, attitude }) => {\n      return acc + Math.abs(predictAttitude[model] - attitude);\n    }, 0) / node.length;\n  const meanSquareError =\n    node.reduce((acc, { predictAttitude, attitude }) => {\n      return acc + Math.pow(predictAttitude[model] - attitude, 2);\n    }, 0) / node.length;\n\n  const rootMeanSquareError = Math.sqrt(\n    node.reduce((acc, { predictAttitude, attitude }) => {\n      return acc + Math.pow(predictAttitude[model] - attitude, 2);\n    }, 0) / node.length\n  );\n  return {\n    meanError,\n    meanOfPercentageError,\n    meanAbsoluteError,\n    meanSquareError,\n    rootMeanSquareError,\n  };\n};\n\nexport const getAllErrorModel = (nodes = []) => {\n  const errorOfExponential = calculateError(nodes, \"exponential\");\n\n  const errorOfLinear = calculateError(nodes, \"linear\");\n\n  const errorOfSherical = calculateError(nodes, \"spherical\");\n\n  const errorOfPentaSpherical = calculateError(nodes, \"pentaspherical\");\n\n  const errorOfGaussian = calculateError(nodes, \"gaussian\");\n  const errorOfTrendline = calculateError(nodes, \"trendline\");\n\n  const errorOfExponentialWithKIteration = calculateError(\n    nodes,\n    \"exponentialWithKIteration\"\n  );\n  const errorOfExponentialWithConstant = calculateError(\n    nodes,\n    \"exponentialWithConstant\"\n  );\n  const result = {\n    exponential: errorOfExponential,\n    linear: errorOfLinear,\n    sherical: errorOfSherical,\n    pentaspherical: errorOfPentaSpherical,\n    gaussian: errorOfGaussian,\n    trendline: errorOfTrendline,\n    exponentialWithKIteration: errorOfExponentialWithKIteration,\n    exponentialWithConstant: errorOfExponentialWithConstant,\n  };\n  return result;\n};\n","export default (nodes, bestSumList = []) => {\n  //let transformNode = nodes;\n  //transformNode[transformNode.length - 1].predictAttitude = bestSum;\n  const nodeTransformPredict = nodes.reduce((acc, next, index) => {\n    return [\n      ...acc,\n      {\n        ...next,\n        predictAttitude: bestSumList[next.id] || 0, //{exponent:0,guassian:1}\n      },\n    ];\n  }, []);\n  return nodeTransformPredict;\n};\n\nexport const computeSeparatePredict = (\n  nodes,\n  bestSumList = [],\n  listIdNodes = []\n) => {\n  //let transformNode = nodes;\n  //transformNode[transformNode.length - 1].predictAttitude = bestSum;\n  const nodeTransformPredict = nodes.reduce((acc, next, index) => {\n    const { id } = next;\n    const isContainId = listIdNodes.indexOf(id) !== -1;\n    if (isContainId) {\n      return [\n        ...acc,\n        {\n          ...next,\n          predictAttitude: bestSumList[index], //{exponent:0,guassian:1}\n        },\n      ];\n    } else {\n      return [\n        ...acc,\n        {\n          ...next,\n        },\n      ];\n    }\n  }, []);\n  return nodeTransformPredict;\n};\n\nexport const transformSemiVarioGramWithSeparateNode = (\n  resultSelectedValiogram,\n  tempSemiVarioGram\n) => {\n  const keys = Object.keys(resultSelectedValiogram);\n  const temp = tempSemiVarioGram;\n  for (let i = 0; i < keys.length; i++) {\n    temp[keys[i]] = [...temp[keys[i]], ...resultSelectedValiogram[keys[i]]];\n  }\n  return temp;\n};\n","import memoize from 'fast-memoize';\nimport { max, min, variance } from 'simple-statistics';\nimport computePredict, { transformSemiVarioGramWithSeparateNode } from './computePredict';\nconst memoizeTransformSemiVarioGramWithSeparateNode = memoize(transformSemiVarioGramWithSeparateNode)\nexport const findCenter = (nodes) => {\n  let tempX = 0;\n  let tempY = 0;\n\n  for (let i = 0; i < nodes.length; i++) {\n    const { latitude, longtitude } = nodes[i];\n    tempX += latitude;\n    tempY += longtitude;\n  }\n\n  return {\n    meanX: tempX / nodes.length,\n    meanY: tempY / nodes.length,\n  };\n};\nexport const randomGenerator = ({ xMax, xMin, yMax, yMin, idTemp, }) => {\n  const latitude = Math.random() * (xMax - xMin + 1) + xMin\n  const longtitude = Math.random() * (yMax - yMin + 1) + yMin\n\n  return {\n    isGenerate: true,\n    longtitude,\n    latitude,\n    attitude: 0,\n    id: idTemp\n  }\n}\nexport const getMinMaxLatAndLon = (zone) => {\n  const zoneKeys = Object.keys(zone)\n\n  const minAndMaxPerZone = zoneKeys.reduce((acc, next, index) => {\n    const nodes = zone[next];\n    const latArr = nodes.map((node) => node.latitude) //x [1,2,3] => max = 3 min =1\n    const lonArr = nodes.map((node) => node.longtitude)//y\n    const xMax = max(latArr) //[1,2,3] = 3\n    const xMin = min(latArr)\n    const yMax = max(lonArr)\n    const yMin = min(lonArr)\n    return {\n      ...acc,\n      [next]: {\n        xMax,\n        xMin,\n        yMax,\n        yMin,\n      }\n    }\n  }, {})\n  return minAndMaxPerZone\n}\n\nexport const withGenerateZone = (n, nodeLength, zone, variable, model, { semiVarioGramHash, allNodeRangeHash, bestSumHash }) => memoizeCalCulateAttitude => {\n\n  const lengthPerZone = Math.ceil(nodeLength / (n * n)) * 2;\n  const zoneKeys = Object.keys(zone)\n  const minAndMaxPerZone = getMinMaxLatAndLon(zone);\n\n  let idTemp = nodeLength + 1;\n  let semiVarioGramTemp = {\n    exponential: [],\n    exponentialWithConstant: [],\n    exponentialWithKIteration: [],\n    gaussian: [],\n    linear: [],\n    pentaspherical: [],\n    spherical: [],\n    trendline: [],\n  };\n  const allRangeOfNodesTemp = []\n  const newNode = []\n  for (let i = 0; i < zoneKeys.length; i++) {\n    const selectedZone = zone[zoneKeys[i]]\n    const generateZoneLength = lengthPerZone - selectedZone.length\n    const { xMax, xMin, yMax, yMin, } = minAndMaxPerZone[i];\n    for (let j = 0; j < generateZoneLength; j++) {\n      selectedZone.push(randomGenerator({\n        xMax, xMin, yMax, yMin, idTemp,\n      }))\n      const {\n        bestSum,\n        allRangeOfNodes,\n        semiVarioGram\n      } = memoizeCalCulateAttitude(selectedZone, variable)\n      selectedZone[selectedZone.length - 1].attitude = bestSum[model]\n\n      semiVarioGramHash[i] = semiVarioGram\n      allNodeRangeHash[i] = allRangeOfNodes\n      bestSumHash[idTemp] = bestSum\n      idTemp++;\n    }\n  }\n  for (let i = 0; i < zoneKeys.length; i++) {\n    const selectedZone = zone[zoneKeys[i]]\n    semiVarioGramTemp = memoizeTransformSemiVarioGramWithSeparateNode(\n      semiVarioGramHash[i],\n      semiVarioGramTemp\n    );\n\n    allRangeOfNodesTemp.push(...allNodeRangeHash[i])\n\n    const trasnformNodesWithPredict = computePredict(\n      selectedZone,\n      bestSumHash\n    );\n    newNode.push(...trasnformNodesWithPredict);\n\n  }\n\n  return {\n    allRangeOfNodesTemp,\n    semiVarioGramTemp,\n    newNode,\n  }\n}\n\nexport const separateZone = (nodes, center) => {\n  const { meanX, meanY } = center;\n  let zoneArray = { 0: [], 1: [], 2: [], 3: [] };\n\n  for (let i = 0; i < nodes.length; i++) {\n    const { latitude, longtitude } = nodes[i];\n    const numberLatitude = Number(latitude);\n    const numberLongtitude = Number(longtitude);\n    if (numberLatitude <= meanX && numberLongtitude >= meanY) {\n      zoneArray[0] = [...zoneArray[0], nodes[i]];\n    }\n\n    if (numberLatitude >= meanX && numberLongtitude >= meanY) {\n      zoneArray[1] = [...zoneArray[1], nodes[i]];\n    }\n\n    if (numberLatitude <= meanX && numberLongtitude <= meanY) {\n      zoneArray[2] = [...zoneArray[2], nodes[i]];\n    }\n\n    if (numberLatitude >= meanX && numberLongtitude <= meanY) {\n      zoneArray[3] = [...zoneArray[3], nodes[i]];\n    }\n  }\n  return {\n    ...zoneArray,\n  };\n};\n\nexport const separateNineZone = (nodes) => {\n  // [ {longtitude, lattitude, attitude}]\n  let zone = { 0: [], 1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [] }\n  const latArr = nodes.map((node) => node.latitude) //x [1,2,3] => max = 3 min =1\n  const lonArr = nodes.map((node) => node.longtitude)//y\n\n  const xMax = max(latArr) //[1,2,3] = 3\n  const xMin = min(latArr)\n\n  const yMax = max(lonArr)\n  const yMin = min(lonArr)\n  // If 1 if( xmin ถึง xmin + X/3 )and( ymin ถึง Y/3) ให้อยู่โซน 1\n  for (let i = 0; i < nodes.length; i++) {\n    const { latitude: x, longtitude: y } = nodes[i]\n    const row = (yMax - yMin) / 3\n    const column = (xMax - xMin) / 3\n\n    if (x < xMin + column && y <= yMin + row) {\n      // 1\n      zone[0] = [\n        ...zone[0],\n        nodes[i]\n      ]\n\n    } else if (x >= xMin + column && x < xMin + 2 * column && y <= yMin + row) {\n      // 2\n      zone[1] = [\n        ...zone[1],\n        nodes[i]\n      ]\n    } else if (x >= xMin + 2 * column && x <= xMax && y <= yMin + row) {\n      // 3\n\n      zone[2] = [\n        ...zone[2],\n        nodes[i]\n      ]\n    } else if (x < xMin + column && y >= yMin + row && y <= yMin + 2 * row) {\n      // 4\n\n      zone[3] = [\n        ...zone[3],\n        nodes[i]\n      ]\n    } else if (x >= xMin + column && x < xMin + 2 * column && y >= yMin + row && y <= yMin + 2 * row) {\n      // 5\n\n      zone[4] = [\n        ...zone[4],\n        nodes[i]\n      ]\n    } else if (x >= xMin + 2 * column && x <= xMax && y >= yMin + row && y <= yMin + 2 * row) {\n      // 6\n      zone[5] = [\n        ...zone[5],\n        nodes[i]\n      ]\n    }\n    else if (x < xMin + column && y >= yMin + 2 * row && y <= yMax) {\n      // 7\n      zone[6] = [\n        ...zone[6],\n        nodes[i]\n      ]\n    }\n    else if (x >= xMin + column && x < xMin + 2 * column && y >= yMin + 2 * row && y <= yMax) {\n      // 8\n      zone[7] = [\n        ...zone[7],\n        nodes[i]\n      ]\n\n    } else {\n      // 9\n\n      zone[8] = [\n        ...zone[8],\n        nodes[i],\n      ]\n    }\n  }\n\n  return zone\n}","import math from \"mathjs\";\nimport createRangeTable from \"./createRangeTable\";\nimport tranformSemivariance from \"./tranformSemivariance\";\nimport createMatrix from \"./createMatrix\";\nimport getStatError from \"./getStatError\";\nimport { findCenter, separateZone } from \"./separateNode\";\n\nconst arrayRotate = (arr = []) => {\n  let data = [];\n  for (let i = 0; i < arr.length; i++) {\n    data[i] = arr[i + 1];\n    if (i === arr.length - 1) {\n      data[i] = arr[0];\n    }\n  }\n  return data;\n};\nconst findMaxRange = (range = []) => {\n  let max = 0;\n  range.map(({ range }) => {\n    return range.map((v) => {\n      if (v > max) {\n        max = v;\n      }\n    });\n  });\n  return max;\n};\n\nexport const recursiveNode = (\n  nodes = [],\n  variable,\n  temp = 0,\n  tempResult = []\n) => {\n  const rotateNodes = arrayRotate(nodes); // rotate\n  let result = [];\n  if (temp === nodes.length) {\n    const range = createRangeTable(rotateNodes); //cal range\n    let maxRange = findMaxRange(range); // max range\n    const data = calculateBestNuggetSillRange(range, maxRange, variable); //cal last node\n    result = [...tempResult, data];\n    return result;\n  } else {\n    const range = createRangeTable(rotateNodes); //cal range\n    let maxRange = findMaxRange(range); // max range\n    const data = calculateBestNuggetSillRange(range, maxRange, variable); //cal last node\n    result = [...tempResult, data];\n    return recursiveNode(rotateNodes, variable, (temp += 1), result);\n  }\n};\n\nexport const calCulateAttitude = (nodes = [], variable) => {\n  // const recursiveResult = recursiveNode(nodes, variable, 0);\n  // const bestSumList = recursiveResult.map(({ bestSum }) => bestSum);\n  const range = createRangeTable(nodes); //transform range for each node\n  let maxRange = findMaxRange(range);\n  const data = calculateBestNuggetSillRange(range, maxRange, variable);\n\n  const allRangeOfNodes = range.map(({ range }) => range);\n  const result = {\n    // bestSumList,\n    bestSum: data.bestSum, //node attitue 31\n    allRangeOfNodes,\n    semiVarioGram: data.semiVarioGram,\n    error: data.minError,\n    bestNugget: data.bestNugget,\n    bestSill: data.bestSill,\n    bestRange: data.bestRange,\n  };\n  return result;\n};\n\nconst calBestAttitudeLastNode = (vairiantNodeObject, model = \"exponential\") => {\n  const convertMatrix = createMatrix(vairiantNodeObject);\n  let A = convertMatrix;\n  let b = vairiantNodeObject[vairiantNodeObject.length - 1][model];\n  const inverMatrix = A.length === 1 ? A : math.inv(A);\n  let w = math.multiply(inverMatrix, b);\n  let sum = 0;\n  for (let i = 0; i < vairiantNodeObject.length - 1; i += 1) {\n    sum += vairiantNodeObject[i].attitude * w[i];\n  }\n  const errorPedictionModel = math.sum(\n    math.dotMultiply(\n      vairiantNodeObject[vairiantNodeObject.length - 1][model],\n      w\n    )\n  );\n  // to do add error model 5 mel\n\n  return {\n    sum,\n    errorPedictionModel,\n  };\n};\n\nconst calculateBestNuggetSillRange = (range, maxRange, variable) => {\n  let nuggetArray = [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]; //11 //10\n  let sillArray = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]; //  10\n  let sillFromExponent = [\n    0.01,\n    0.02,\n    0.03,\n    0.04,\n    0.05,\n    0.06,\n    0.07,\n    0.08,\n    0.09,\n    0.1,\n  ];\n\n  let minError = {\n    exponential: 0,\n    linear: 0,\n    spherical: 0,\n    pentaspherical: 0,\n    gaussian: 0,\n    exponentialWithKIteration: 0,\n    exponentialWithConstant: 0,\n  };\n\n  let semiVarioGram = {\n    exponential: [],\n    linear: [],\n    spherical: [],\n    pentaspherical: [],\n    gaussian: [],\n    trendline: [],\n    exponentialWithKIteration: [],\n    exponentialWithConstant: [],\n  };\n\n  let bestNugget = {\n    exponential: 0,\n    linear: 0,\n    spherical: 0,\n    pentaspherical: 0,\n    gaussian: 0,\n    trendline: 0,\n    exponentialWithKIteration: 0,\n    exponentialWithConstant: 0,\n  };\n\n  let bestSill = {\n    exponential: 0,\n    linear: 0,\n    spherical: 0,\n    pentaspherical: 0,\n    gaussian: 0,\n    trendline: 0,\n    exponentialWithKIteration: 0,\n    exponentialWithConstant: 0,\n  };\n\n  let bestRange = {\n    exponential: 0,\n    linear: 0,\n    spherical: 0,\n    pentaspherical: 0,\n    gaussian: 0,\n    trendline: 0,\n    exponentialWithKIteration: 0,\n    exponentialWithConstant: 0,\n  };\n\n  let bestSum = {\n    exponential: 0,\n    linear: 0,\n    spherical: 0,\n    pentaspherical: 0,\n    gaussian: 0,\n    trendline: 0,\n    exponentialWithKIteration: 0,\n    exponentialWithConstant: 0,\n  };\n\n  if (!!variable.nugget && !!variable.sill && !!variable.range) {\n    const vairiantNodeObjectConstant = tranformSemivariance(range)(\n      Number(variable.nugget),\n      Number(variable.sill),\n      Number(variable.range)\n    );\n\n    const modelExponentialWithContant = calBestAttitudeLastNode(\n      vairiantNodeObjectConstant,\n      \"exponential\"\n    );\n\n    const modelGussian = calBestAttitudeLastNode(\n      vairiantNodeObjectConstant,\n      \"gaussian\"\n    );\n\n    const modelSpherical = calBestAttitudeLastNode(\n      vairiantNodeObjectConstant,\n      \"spherical\"\n    );\n\n    minError[\"exponentialWithConstant\"] =\n      modelExponentialWithContant.errorPedictionModel;\n    bestNugget[\"exponentialWithConstant\"] = variable.nugget;\n    bestSill[\"exponentialWithConstant\"] = variable.sill;\n    bestRange[\"exponentialWithConstant\"] = variable.range;\n    bestSum[\"exponentialWithConstant\"] = modelExponentialWithContant.sum;\n    semiVarioGram[\n      \"exponentialWithConstant\"\n    ] = vairiantNodeObjectConstant.map(({ exponential }) => exponential);\n\n    minError[\"gaussian\"] = modelGussian.errorPedictionModel;\n    bestNugget[\"gaussian\"] = variable.nugget;\n    bestSill[\"gaussian\"] = variable.sill;\n    bestRange[\"gaussian\"] = variable.range;\n    bestSum[\"gaussian\"] = modelGussian.sum;\n    semiVarioGram[\"gaussian\"] = vairiantNodeObjectConstant.map(\n      ({ gaussian }) => gaussian\n    );\n    /* spherical */\n\n    minError[\"spherical\"] = modelSpherical.errorPedictionModel;\n    bestNugget[\"spherical\"] = variable.nugget;\n    bestSill[\"spherical\"] = variable.sill;\n    bestRange[\"spherical\"] = variable.range;\n    bestSum[\"spherical\"] = modelSpherical.sum;\n    semiVarioGram[\"spherical\"] = vairiantNodeObjectConstant.map(\n      ({ spherical }) => spherical\n    );\n    /* spherical */\n\n  }\n\n\n  for (let i = 0; i < nuggetArray.length; i++) {\n    for (let j = 0; j < sillArray.length; j++) {\n      const vairiantNodeObject = tranformSemivariance(range)(\n        +nuggetArray[i],\n        +sillArray[j],\n        maxRange\n      );\n      const modelExponential = calBestAttitudeLastNode(\n        vairiantNodeObject,\n        \"exponential\"\n      );\n\n      const modelLinear = calBestAttitudeLastNode(vairiantNodeObject, \"linear\");\n\n      const modelPentaSpherical = calBestAttitudeLastNode(\n        vairiantNodeObject,\n        \"pentaspherical\"\n      );\n\n      const modelTrendline = calBestAttitudeLastNode(\n        vairiantNodeObject,\n        \"exponentialPolynomialTrendlines\"\n      );\n\n      minError[\"trendline\"] = modelTrendline.errorPedictionModel;\n      bestRange[\"trendline\"] = maxRange;\n      bestSum[\"trendline\"] = modelTrendline.sum;\n      semiVarioGram[\"trendline\"] = vairiantNodeObject.map(\n        ({ exponentialPolynomialTrendlines }) => exponentialPolynomialTrendlines\n      );\n\n      const ExponentialVairiantWithSubSill = tranformSemivariance(range)(\n        +nuggetArray[i],\n        +sillFromExponent[j],\n        maxRange\n      );\n\n      const modelExponentialWithKIteration = calBestAttitudeLastNode(\n        ExponentialVairiantWithSubSill,\n        \"exponential\"\n      );\n\n      semiVarioGram[\"trendline\"] = vairiantNodeObject.map(\n        ({ exponentialPolynomialTrendlines }) => exponentialPolynomialTrendlines\n      );\n\n      minError[\"trendline\"] = modelTrendline.errorPedictionModel;\n      bestRange[\"trendline\"] = maxRange;\n      bestSum[\"trendline\"] = modelTrendline.sum;\n      semiVarioGram[\"trendline\"] = vairiantNodeObject.map(\n        ({ exponentialPolynomialTrendlines }) => exponentialPolynomialTrendlines\n      );\n\n      if (minError[\"exponentialWithKIteration\"] === 0) {\n        minError[\"exponentialWithKIteration\"] =\n          modelExponentialWithKIteration.errorPedictionModel;\n        bestNugget[\"exponentialWithKIteration\"] = nuggetArray[i];\n        bestSill[\"exponentialWithKIteration\"] = sillFromExponent[j];\n        bestRange[\"exponentialWithKIteration\"] = maxRange;\n        bestSum[\"exponentialWithKIteration\"] =\n          modelExponentialWithKIteration.sum;\n        semiVarioGram[\n          \"exponentialWithKIteration\"\n        ] = ExponentialVairiantWithSubSill.map(\n          ({ exponential }) => exponential\n        );\n      }\n\n      if (\n        modelExponentialWithKIteration.errorPedictionModel <\n        minError[\"exponentialWithKIteration\"]\n      ) {\n        minError[\"exponentialWithKIteration\"] =\n          modelExponentialWithKIteration.errorPedictionModel;\n        bestNugget[\"exponentialWithKIteration\"] = nuggetArray[i];\n        bestSill[\"exponentialWithKIteration\"] = sillFromExponent[j];\n        bestRange[\"exponentialWithKIteration\"] = maxRange;\n        bestSum[\"exponentialWithKIteration\"] =\n          modelExponentialWithKIteration.sum;\n        semiVarioGram[\n          \"exponentialWithKIteration\"\n        ] = ExponentialVairiantWithSubSill.map(\n          ({ exponential }) => exponential\n        );\n      }\n\n      //\n\n      if (minError[\"pentaspherical\"] === 0) {\n        minError[\"pentaspherical\"] = modelPentaSpherical.errorPedictionModel;\n        bestNugget[\"pentaspherical\"] = nuggetArray[i];\n        bestSill[\"pentaspherical\"] = sillArray[j];\n        bestRange[\"pentaspherical\"] = maxRange;\n        bestSum[\"pentaspherical\"] = modelPentaSpherical.sum;\n        semiVarioGram[\"pentaspherical\"] = vairiantNodeObject.map(\n          ({ pentaspherical }) => pentaspherical\n        );\n      }\n      if (\n        modelPentaSpherical.errorPedictionModel < minError[\"pentaspherical\"]\n      ) {\n        minError[\"pentaspherical\"] = modelPentaSpherical.errorPedictionModel;\n        bestNugget[\"pentaspherical\"] = nuggetArray[i];\n        bestSill[\"pentaspherical\"] = sillArray[j];\n        bestRange[\"pentaspherical\"] = maxRange;\n        bestSum[\"pentaspherical\"] = modelPentaSpherical.sum;\n        semiVarioGram[\"pentaspherical\"] = vairiantNodeObject.map(\n          ({ pentaspherical }) => pentaspherical\n        );\n      }\n\n      /*linear*/\n      if (minError[\"linear\"] === 0) {\n        minError[\"linear\"] = modelLinear.errorPedictionModel;\n        bestNugget[\"linear\"] = nuggetArray[i];\n        bestSill[\"linear\"] = sillArray[j];\n        bestRange[\"linear\"] = maxRange;\n        bestSum[\"linear\"] = modelLinear.sum;\n        semiVarioGram[\"linear\"] = vairiantNodeObject.map(\n          ({ linear }) => linear\n        );\n      }\n      if (modelLinear.errorPedictionModel < minError[\"linear\"]) {\n        minError[\"linear\"] = modelLinear.errorPedictionModel;\n        bestNugget[\"linear\"] = nuggetArray[i];\n        bestSill[\"linear\"] = sillArray[j];\n        bestRange[\"linear\"] = maxRange;\n        bestSum[\"linear\"] = modelLinear.sum;\n        semiVarioGram[\"linear\"] = vairiantNodeObject.map(\n          ({ linear }) => linear\n        );\n      }\n      /*linear*/\n\n      /*exponential*/\n\n      if (minError[\"exponential\"] === 0) {\n        minError[\"exponential\"] = modelExponential.errorPedictionModel;\n        bestNugget[\"exponential\"] = nuggetArray[i];\n        bestSill[\"exponential\"] = sillArray[j];\n        bestRange[\"exponential\"] = maxRange;\n        bestSum[\"exponential\"] = modelExponential.sum;\n        semiVarioGram[\"exponential\"] = vairiantNodeObject.map(\n          ({ exponential }) => exponential\n        );\n      }\n      if (modelExponential.errorPedictionModel < minError[\"exponential\"]) {\n        minError[\"exponential\"] = modelExponential.errorPedictionModel;\n        bestNugget[\"exponential\"] = nuggetArray[i];\n        bestSill[\"exponential\"] = sillArray[j];\n        bestRange[\"exponential\"] = maxRange;\n        bestSum[\"exponential\"] = modelExponential.sum;\n        semiVarioGram[\"exponential\"] = vairiantNodeObject.map(\n          ({ exponential }) => exponential\n        );\n      }\n      /*exponential*/\n    }\n  }\n\n  return {\n    bestRange,\n    bestNugget,\n    bestSill,\n    bestSum,\n    semiVarioGram,\n    minError,\n  };\n};\n","export default (data = [], model = 'exponential') =>\n  data.reduce((array, next) => {\n    return [\n      ...array,\n      next[model].reduce((prev, value) => {\n        if (array.length === data.length - 1) {\n          if (prev.length === data.length - 1) {\n            return [...prev, 0];\n          }\n          return [...prev, 1];\n        }\n        return [...prev, value];\n      }, [])\n    ];\n  }, []);\n","export default (data = [], key) =>\n  data.reduce((acc, next) => {\n    const value = next[key];\n    if (key === \"attitude\") {\n      return [...acc, value];\n    }\n    return [...acc, value];\n\n    // {attitude}\n  }, []);\n\nexport const getZ = (data = [], model) => {\n  return data.reduce((acc, next) => {\n    const value = next.predictAttitude[model] || next.attitude\n    return [...acc, value]\n  }, [])\n}","export default (allRangeOfNodes, semiVarioGram, model = \"exponential\", name = 'Gussian Model') => {\n  let scatterGraph = [];\n  for (let i = 0; i < allRangeOfNodes.length - 1; i++) {\n    const length = allRangeOfNodes[i].length;\n    const lengthSemi = semiVarioGram[model][i].length;\n    const range = allRangeOfNodes[i].slice(0, length - 1);\n    const semi = semiVarioGram[model][i].slice(0, lengthSemi - 1);\n\n    scatterGraph.push({\n      x: range,\n      y: semi,\n      mode: \"markers\",\n      name: name,\n      type: \"scatter\",\n    });\n  }\n  return scatterGraph;\n};\n","export default (nodeRange = [], semiVariant = []) => {\n    let result = []\n    for (let i = 0; i < nodeRange.length; i++) {\n        result = [\n            ...result,\n            [nodeRange[0][i], semiVariant[0][i]]\n        ]\n    }\n    return result\n}","import React from \"react\";\nconst ErrorTable = ({ error, semiVarioGram, variable }) => {\n  const isHaveNuggetSillRange = Object.keys(variable).length > 0;\n  const isHaveCalculateConstant = isHaveNuggetSillRange\n    ? true\n    : semiVarioGram && semiVarioGram.exponentialWithConstant;\n\n  return (\n    <div>\n      <table id=\"error-table\">\n        <thead>\n          <tr>\n            <th>Model</th>\n            <th>Mean Error</th>\n            <th>Mean of Percentage Error</th>\n            <th>Mean Absolute Error</th>\n            <th>Mean Squre Error</th>\n            <th>Root Mean Squre Error</th>\n          </tr>\n        </thead>\n        <tbody style={{ textAlign: \"center\" }}>\n          <tr>\n            <td>Guassian Model</td>\n            <td>{error[\"gaussian\"].meanError}</td>\n            <td>{error[\"gaussian\"].meanOfPercentageError}</td>\n            <td>{error[\"gaussian\"].meanAbsoluteError}</td>\n            <td>{error[\"gaussian\"].meanSquareError}</td>\n            <td>{error[\"gaussian\"].rootMeanSquareError}</td>\n          </tr>\n          <tr>\n            <td>Spherical Model</td>\n            <td>{error[\"sherical\"].meanError}</td>\n            <td>{error[\"sherical\"].meanOfPercentageError}</td>\n            <td>{error[\"sherical\"].meanAbsoluteError}</td>\n            <td>{error[\"sherical\"].meanSquareError}</td>\n            <td>{error[\"sherical\"].rootMeanSquareError}</td>\n          </tr>\n          {isHaveCalculateConstant && (\n            <tr>\n              <td>Exponential Model</td>\n              <td>{error[\"exponentialWithConstant\"].meanError}</td>\n              <td>{error[\"exponentialWithConstant\"].meanOfPercentageError}</td>\n              <td>{error[\"exponentialWithConstant\"].meanAbsoluteError}</td>\n              <td>{error[\"exponentialWithConstant\"].meanSquareError}</td>\n              <td>{error[\"exponentialWithConstant\"].rootMeanSquareError}</td>\n            </tr>\n          )}\n          <tr>\n            <td>Exponential(EPO)</td>\n            <td>{error[\"exponential\"].meanError}</td>\n            <td>{error[\"exponential\"].meanOfPercentageError}</td>\n            <td>{error[\"exponential\"].meanAbsoluteError}</td>\n            <td>{error[\"exponential\"].meanSquareError}</td>\n            <td>{error[\"exponential\"].rootMeanSquareError}</td>\n          </tr>\n          {/* trendline */}\n          <tr>\n            <td>Exponential(ETL)</td>\n            <td>{error[\"exponential\"].meanError}</td>\n            <td>{error[\"exponential\"].meanOfPercentageError}</td>\n            <td>{error[\"exponential\"].meanAbsoluteError}</td>\n            <td>{error[\"exponential\"].meanSquareError}</td>\n            <td>{error[\"exponential\"].rootMeanSquareError}</td>\n          </tr>\n          <tr>\n            <td>Exponential(EKO)</td>\n            <td>{error[\"exponentialWithKIteration\"].meanError}</td>\n            <td>{error[\"exponentialWithKIteration\"].meanOfPercentageError}</td>\n            <td>{error[\"exponentialWithKIteration\"].meanAbsoluteError}</td>\n            <td>{error[\"exponentialWithKIteration\"].meanSquareError}</td>\n            <td>{error[\"exponentialWithKIteration\"].rootMeanSquareError}</td>\n          </tr>\n\n        </tbody>\n      </table>\n    </div>\n  );\n};\nexport default ErrorTable;\n","import React from \"react\";\nconst NodeResultTable = ({ list }) => {\n  const modelList = [\n    \"exponential\",\n    \"linear\",\n    \"spherical\",\n    \"pentaspherical\",\n    \"gaussian\",\n    \"trendline\",\n    \"exponentialWithKIteration\",\n    \"exponentialWithConstant\",\n  ];\n  return (\n    <table id=\"table-calculate-node-result\" style={{ display: \"none\" }}>\n      <thead>\n        <tr>\n          <th>latitude</th>\n          <th>longtitude</th>\n          <th>attitude</th>\n          {modelList.map((key) => {\n            return <th key={key}>Predict Attitude model: {key}</th>;\n          })}\n        </tr>\n      </thead>\n      <tbody>\n        {list.map(({ id, latitude, longtitude, attitude, predictAttitude }) => {\n          return (\n            <tr key={`${id}-${latitude}`}>\n              <td>{latitude}</td>\n              <td>{longtitude}</td>\n              <td>{attitude}</td>\n              {modelList.map((key) => {\n                return <td key={`predict-${key}`}>{predictAttitude[key]}</td>;\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nexport default NodeResultTable;\n","export const buttonList = [\n  {\n    label: 'Gussian Model',\n    model: 'gaussian'\n  },\n  {\n    model: \"spherical\",\n    label: 'Spherical Model'\n  },\n  {\n    label: 'Exponential',\n    model: 'exponentialWithConstant'\n  },\n  {\n    label: 'Exponential with Parameter Optimizer',\n    model: 'exponential'\n  },\n  {\n    label: 'Exponential with K-Iterations Optimizer',\n    model: 'exponentialWithKIteration'\n  },\n  {\n    label: 'Exponential with Polynomial-Trend Line',\n    model: 'trendline'\n  },\n]","import React, { Component } from \"react\";\nimport ReactHTMLTableToExcel from \"react-html-table-to-excel\";\n\nimport Plot from \"react-plotly.js\";\nimport memoize from \"fast-memoize\";\nimport { calCulateAttitude } from \"../Utils/calBestAttitude\";\nimport Loader from \"react-loader-spinner\";\nimport * as XLSX from \"xlsx\";\nimport getXYZ, { getZ } from \"../Utils/getXYZ\";\nimport { getAllErrorModel } from \"../Utils/getStatError\";\nimport computePredict from \"../Utils/computePredict\";\nimport createScatterGraph from \"../Utils/createScatterGraph\";\nimport { Chart } from \"react-google-charts\";\nimport getTrendlines from \"../Utils/getTrendlines\";\n// import { separatePoint } from \"../Utils/separatePoint\";\nimport ErrorTable from \"../components/ErrorTable\";\nimport NodeResultTable from \"../components/NodeResultTable\";\nimport { Link } from \"react-router-dom\";\nimport { buttonList } from \"../Utils/config\";\n\nconst memoizeCalCulateAttitude = memoize(calCulateAttitude);\nclass Form extends Component {\n  state = {\n    nodes: [{ id: 1, latitude: \"\", longtitude: \"\", attitude: \"\" }],\n    x: [],\n    y: [],\n    z: [],\n    loading: false,\n    variable: {\n      nugget: \"\",\n      sill: \"\",\n      range: \"\",\n    },\n  };\n\n  addNode = () => {\n    const { nodes } = this.state;\n    const id = nodes.length + 1;\n    this.setState({\n      nodes: [\n        ...nodes,\n        {\n          id: id,\n          latitude: \"\",\n          longtitude: \"\",\n          attitude: \"\",\n        },\n      ],\n    });\n  };\n  onChangeFile = (e) => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n    reader.onload = (evt) => {\n      /* Parse data */\n      const bstr = evt.target.result;\n      const wb = XLSX.read(bstr, { type: \"binary\" });\n      /* Get first worksheet */\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n      const data = XLSX.utils.sheet_to_json(ws, { header: 1 });\n      /* Update state */\n      data.shift();\n      const transformDataNode = data.reduce((array, next, index) => {\n        return [\n          ...array,\n          {\n            id: index + 1,\n            latitude: next[0], //x\n            longtitude: next[1], //y\n            attitude: next[2], //z\n            predictAttitude: next[3], //p\n          },\n        ];\n      }, []);\n      this.setState({\n        nodes: transformDataNode,\n      });\n    };\n    reader.readAsBinaryString(file);\n  };\n  onChangeNode = (id) => (e) => {\n    const { nodes } = this.state;\n    const { name, value } = e.target;\n    const temp = nodes;\n    temp[id - 1][name] = value;\n    this.setState({\n      nodes: temp,\n    });\n  };\n  deleteNodes = (e) => {\n    const { nodes } = this.state;\n    const { id } = e.target;\n    const nodeIdTarget = parseInt(id);\n    const updateDeleteNode = nodes.filter(({ id }) => id !== nodeIdTarget);\n    this.setState({\n      nodes: updateDeleteNode,\n    });\n  };\n\n  onSubmit = () => {\n    const { nodes, loading, variable } = this.state;\n    this.setState({\n      loading: !loading,\n    });\n    const {\n      bestSumList,\n      bestSum,\n      allRangeOfNodes,\n      semiVarioGram,\n    } = memoizeCalCulateAttitude(nodes, variable);\n    let newNodesWithLastAttitude = nodes;\n\n    this.setState({\n      bestSumList,\n      lastPredictNode: bestSum,\n      allRangeOfNodes,\n      nodes: newNodesWithLastAttitude,\n      semiVarioGram,\n      loading: false,\n    });\n  };\n  handleChangeModel = (label) => (e) => {\n    const value = e.target.value;\n    this.setState({\n      model: value,\n      labelModel: label\n    });\n  };\n  handleChangeValue = (e) => {\n    const { name, value } = e.target;\n    this.setState({\n      variable: {\n        ...this.state.variable,\n        [name]: value,\n      },\n    });\n  };\n  render() {\n    const {\n      nodes,\n      loading,\n      lastPredictNode = false,\n      allRangeOfNodes,\n      semiVarioGram,\n      bestSumList = false,\n      model = \"gaussian\",\n      variable,\n    } = this.state;\n    const transformDataNode = lastPredictNode // TODO: lastPredictNode\n      ? computePredict(nodes, bestSumList)\n      : nodes;\n\n    const scatterGraph = lastPredictNode\n      ? createScatterGraph(allRangeOfNodes, semiVarioGram, model, this.state.labelModel || \"Gussian Model\")\n      : false;\n    const x = getXYZ(transformDataNode, \"latitude\");\n    const y = getXYZ(transformDataNode, \"longtitude\");\n    const z = lastPredictNode ? getZ(transformDataNode, model) : [];\n\n    const error = lastPredictNode\n      ? getAllErrorModel(transformDataNode, lastPredictNode)\n      : false;\n\n    const trendlineData = lastPredictNode\n      ? getTrendlines(allRangeOfNodes, semiVarioGram[\"gaussian\"]).filter(([a, b]) => b !== 1)\n      : [];\n\n\n\n\n    const data = [[\"Distance\", \"Semivariance\"], ...trendlineData];\n    const options = {\n      title: \"Exponential Polynomial Trendline\",\n      legend: 'bottom',\n      crosshair: { trigger: \"both\", orientation: \"both\" },\n      trendlines: {\n        0: {\n          type: \"polynomial\",\n          degree: 3,\n          visibleInLegend: true,\n        },\n      },\n      vAxis: { title: 'Semivariance' },\n      hAxis: { title: 'Distance' },\n    };\n    const isDisabledSubmit = !variable.nugget && !variable.sill && !variable.range\n\n    return (\n      <div className=\"container-graph\">\n        {loading && (\n          <div className=\"modal\">\n            <Loader type=\"Puff\" color=\"#00BFFF\" height=\"100\" width=\"100\" />\n          </div>\n        )}\n\n        <div style={{ margin: \"15px\" }}>\n          <Link style={{ marginRight: \"15px\" }} to=\"/\">1 x 1 zone</Link>\n          <Link style={{ marginRight: \"15px\" }} to=\"/separate\">2 x 2 zones</Link>\n          <Link style={{ marginRight: \"15px\" }} to=\"/nine-separate\">3 x 3 zones</Link>\n          <Link to=\"/sixteen-separate\">4 x 4 zones</Link>\n          <h1>\n            {this.state.labelModel || \"Gussian Model\"}\n          </h1>\n          <div>\n            <h1>Model Selection</h1>\n\n            {\n              buttonList.map(({ label, model }) => {\n                return (\n                  <button onClick={this.handleChangeModel(label)} value={model}>\n                    {label}\n                  </button>\n                )\n              })\n            }\n\n          </div>\n          <h1>Node list</h1>\n          <input\n            name=\"nugget\"\n            placeholder=\"nugget\"\n            onChange={this.handleChangeValue}\n          />\n          <input\n            name=\"sill\"\n            placeholder=\"sill\"\n            onChange={this.handleChangeValue}\n          />\n          <input\n            name=\"range\"\n            placeholder=\"range\"\n            onChange={this.handleChangeValue}\n          />\n          <div className=\"input-node-title\">\n            <p className=\"node-p-id\">ID</p>\n            <p className=\"node-unit\">Latitude</p>\n            <p className=\"node-unit\">Longtitude</p>\n            <p className=\"node-unit\">Altitude</p>\n            <p className=\"node-unit\">Predicted Altitude</p>\n          </div>\n\n          {transformDataNode.map(\n            ({ id, latitude, longtitude, attitude, predictAttitude }) => (\n              <div key={id + latitude.toString()} className=\"input-node\">\n                <div className=\"id-node\">\n                  <p>{id}</p>\n                </div>\n                <div>\n                  <input\n                    onChange={this.onChangeNode(id)}\n                    name=\"latitude\"\n                    value={latitude || \"\"}\n                  ></input>\n                </div>\n                <div>\n                  <input\n                    onChange={this.onChangeNode(id)}\n                    name=\"longtitude\"\n                    value={longtitude || \"\"}\n                  ></input>\n                </div>\n                <div>\n                  <input\n                    onChange={this.onChangeNode(id)}\n                    name=\"attitude\"\n                    value={attitude || \"\"}\n                  ></input>\n                </div>\n                <div>\n                  <input\n                    onChange={this.onChangeNode(id)}\n                    name=\"predictAttitude\"\n                    value={bestSumList ? predictAttitude[model] : \"\"}\n                  ></input>\n                </div>\n                <div>\n                  <button id={id} onClick={this.deleteNodes}>\n                    Delete\n                  </button>\n                </div>\n              </div>\n            )\n          )}\n\n          <input onChange={this.onChangeFile} type=\"file\"></input>\n          <button onClick={this.addNode}>ADD NODE</button>\n          <button onClick={this.onSubmit} disabled={isDisabledSubmit}>Submit</button>\n          {error && (\n            <div className=\"wrapper-export-excel\">\n              <ReactHTMLTableToExcel\n                id=\"table-calculate-node-result-button\"\n                className=\"download-table-xls-button\"\n                table=\"table-calculate-node-result\"\n                filename=\"prediction_calculate_result\"\n                sheet=\"prediction_calculate_result\"\n                buttonText=\"Download as prediction\"\n              />\n              <ReactHTMLTableToExcel\n                id=\"test-table-xls-button\"\n                className=\"download-table-xls-button\"\n                table=\"error-table\"\n                filename=\"errorSheet\"\n                sheet=\"ErrorSheetxls\"\n                buttonText=\"Download as errors report\"\n              />\n            </div>\n          )}\n        </div>\n\n        <div className=\"graph\">\n          {error && (\n            <>\n              <ErrorTable\n                error={error}\n                semiVarioGram={semiVarioGram}\n                variable={variable}\n              />\n\n              <NodeResultTable list={transformDataNode} />\n            </>\n          )}\n          {scatterGraph && (\n            <Plot\n              data={scatterGraph}\n              layout={{\n                width: 900,\n                height: 600,\n                title: \"Semivariogram Analysis\",\n                xaxis: {\n                  title: \"Distance\",\n                },\n                yaxis: {\n                  title: \"Semivariogram\",\n                },\n              }}\n            />\n          )}\n          {lastPredictNode ? (\n            <Plot\n              data={[\n                {\n                  x: x,\n                  y: y,\n                  z: z,\n                  type: \"mesh3d\",\n                  showscale: true,\n                  intensity: z,\n                  colorscale: [\n                    [0, 'rgb(0, 0, 255)'],\n                    [0.5, 'rgb(0, 128, 0)'],\n                    [1, 'rgb(255, 255, 0)']\n                  ],\n                  colorbar: {\n                    title: 'Predicted Altitude'\n                  },\n                },\n              ]}\n              layout={{\n                width: 900,\n                height: 600,\n                title: \"3D Surface Plots\",\n                scene: {\n                  aspectratio: {\n                    x: 1,\n                    y: 1,\n                    z: 0.5\n                  },\n                  zaxis: {\n                    title: 'Predicted Altitude',\n                    backgroundcolor: 'rgb(230,230,200)',\n                    showbackground: true,\n                    zerolinecolor: 'white',\n                    gridcolor: 'white',\n                    nticks: 20,\n                    range: [0, 100],\n\n                  },\n                  yaxis: {\n                    title: 'Longtitude',\n                    nticks: 10,\n                    backgroundcolor: 'rgb(230,230,200)',\n                    showbackground: true,\n                    zerolinecolor: 'white',\n                    gridcolor: 'white',\n                  },\n                  xaxis: {\n                    title: 'Latitude',\n                    nticks: 10,\n                    backgroundcolor: 'rgb(230,230,200)',\n                    showbackground: true,\n                    zerolinecolor: 'white',\n                    gridcolor: 'white',\n                  }\n                }\n              }}\n            />\n          ) : null}\n          {lastPredictNode ? (\n            <Plot\n              data={[\n                {\n                  x: x,\n                  y: y,\n                  z: z,\n                  intensity: z,\n                  type: \"contour\",\n                  contours: {\n                    showlabels: true,\n                    labelfont: {\n                      family: 'Raleway',\n                      size: 12,\n                      color: 'white',\n                    }\n                  },\n                  colorscale: [\n                    [0, 'rgb(0, 0, 255)'],\n                    [0.5, 'rgb(0, 128, 0)'],\n                    [1, 'rgb(255, 255, 0)']\n                  ],\n                  colorbar: {\n                    title: 'Predicted Altitude'\n                  },\n                },\n              ]}\n              layout={{\n                width: 900,\n                height: 600,\n                title: \"Contour Plots\",\n                scene: {\n                  aspectratio: {\n                    x: 1,\n                    y: 1,\n                    z: 0.5\n                  },\n                  zaxis: {\n                    title: 'Predicted Altitude',\n                    backgroundcolor: 'rgb(230,230,200)',\n                    showbackground: true,\n                    zerolinecolor: 'white',\n                    gridcolor: 'white',\n                    nticks: 20,\n                    range: [0, 100],\n\n                  },\n                  yaxis: {\n                    title: 'Longtitude',\n                    nticks: 10,\n                    backgroundcolor: 'rgb(230,230,200)',\n                    showbackground: true,\n                    zerolinecolor: 'white',\n                    gridcolor: 'white',\n                  },\n                  xaxis: {\n                    title: 'Latitude',\n                    nticks: 10,\n                    backgroundcolor: 'rgb(230,230,200)',\n                    showbackground: true,\n                    zerolinecolor: 'white',\n                    gridcolor: 'white',\n                  }\n                }\n              }}\n            />\n          ) : null}\n          {trendlineData.length > 0 && (\n            <Chart\n              chartType=\"ScatterChart\"\n              width=\"900px\"\n              height=\"600px\"\n              data={data}\n              options={options}\n              legendToggle\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Form;\n","import React, { Component } from \"react\"; // ONLY COMPONENT\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Form from \"./pages/Form\";\n// import Addnode from './pages/Addnode'\n// import ViewVariogram from './pages/ViewVariogram'\n// import logo from './logo.svg';\nimport \"./App.css\";\n// import Button from './components/Button';\nimport { connect } from \"react-redux\";\n\nclass App extends Component {\n  state = {\n    name: \"\",\n  };\n  HandleChangeName = (e) => {\n    const value = e.target.value;\n    this.setState({\n      name: value,\n    });\n  };\n  Handlealert = (name) => {\n    return alert(name);\n  };\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <Route path=\"/\" exact component={Form} />\n          </header>\n        </div>\n      </Router>\n    );\n  }\n}\nconst mapStoreToProps = (store) => {\n  /*\n  state = {\n    nodeList:[],\n  }\n   */\n  return {\n    nodesList: store.nodesList,\n    user: store.user,\n  };\n};\n\nexport default connect(mapStoreToProps, null)(App);\n//(store)=>  App(mapStateToProps(store))\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import axios from 'axios'\nexport const GET_ALLNODE = 'GET_ALLNODE'\nexport const SET_ADDNODE_RESULT = 'SET_ADDNODE_RESULT'\nexport const GET_ALL_PREDICT = 'GET_ALL_PREDICT'\nconst BASE_URL = 'http://localhost:5000'\n\nexport const getAllNode = () => {\n    return async dispatch => { //middleware reduct-thunk\n        const response = await axios.get(`${BASE_URL}/`)\n        return dispatch({\n            type: GET_ALLNODE,\n            payload: response.data //[....nodes]\n        })\n\n    }\n}\n\nexport const addNode = (value) => {\n    // know  latitude longtitude attitude for calculate best nugget sill range\n    return async dispatch => {\n        const response = await axios.post(`${BASE_URL}/node/create-with-attitude`, value)\n        return dispatch({\n            type: SET_ADDNODE_RESULT,\n            payload: response.data /*{\n             status: 'success',\n              value: 30.00,\n              error :0.3333,\n            }*/\n        })\n    }\n}\n\nexport const addvariogram = (value) => {\n    return async dispatch => {\n        const response = await axios.post(`${BASE_URL}/semivariogram/create`, value)\n        return dispatch({\n            type: GET_ALL_PREDICT,\n            payload: response.data //[]\n        })\n    }\n}","import { GET_ALLNODE } from '../actions'\nconst initialState = [] //array\n\nexport default (state = initialState, action) => {\n\n    switch (action.type) {\n        case\n            GET_ALLNODE: //what action\n            return action.payload  //[..nodes from api]\n\n        default:\n            return state\n    }\n}","const initialState = {\n    name: 'JOHN',\n    surname: 'DO',\n    parent: {\n        mother: {\n            name: 'Marry'\n        }\n    },\n    brother: [{ id: 1, name: 'tong' }, { id: 2, name: 'kratai' }]\n}\n//array\n\nexport default (state = initialState, action) => {\n\n    switch (action.type) {\n        default:\n            return state\n    }\n}","import { combineReducers } from 'redux'\nimport nodesList from './nodeList'\nimport user from './user'\nimport nodeResult from './addNodeResult'\nimport Predict from './Predict'\n\n\nconst root = combineReducers({\n    nodesList, //[]\n    user,\n    nodeResult,\n    Predict\n});\nexport default root;\n//nodesList=[{id:'0',value:'1'}]\n//varain = [{nugget:'1',sill:'2',ragne:'3'}]\n// users //initialState = {name:'JOHN',surname:'DO'}","import { SET_ADDNODE_RESULT } from '../actions'\nexport default (state = {}, action) => {\n  switch (action.type) {\n    case SET_ADDNODE_RESULT:\n      return action.payload\n      break;\n\n    default:\n      return state\n      break;\n  }\n}","import { GET_ALL_PREDICT } from '../actions'\nexport default (state = [], action) => {\n    switch (action.type) {\n        case GET_ALL_PREDICT:\n            /*\n            action.payload = {\n                data:[\n    \n                ]\n            }\n            */\n            return action.payload.data\n            break;\n\n        default:\n            return state\n            break;\n    }\n}","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { addNode } from '../actions'\nclass Addnode extends Component {\n    state = {\n        attitude: '',\n        longtitude: '',\n        latitude: ''\n    }\n    onChangeText = (e) => {\n        const { name, value } = e.target\n        this.setState({\n            [name]: value\n        })\n\n    }\n    onSubmit = () => {\n        this.props.handleSumitNode(this.state)\n    }\n    render() {\n        return (\n            <div>\n                <p>Latitude</p>\n                <input onChange={this.onChangeText} name=\"latitude\" />\n                <p>Longtitude</p>\n                <input onChange={this.onChangeText} name=\"longtitude\" />\n                <p>Attitude</p>\n                <input onChange={this.onChangeText} name=\"attitude\" />\n                <br></br>\n                <button onClick={this.onSubmit} >ADD NODE</button>\n            </div>\n        )\n    }\n}\nconst mapDisPatchToProps = (dispatch) => {\n    return {\n        handleSumitNode: (value) => dispatch(addNode(value))\n    }\n}\nexport default connect(null, mapDisPatchToProps)(Addnode)","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { addvariogram } from '../actions'\nclass Variogram extends Component {\n    state = {\n        nugget: '',\n        sill: '',\n        range: ''\n    }\n    onChangeText = (e) => {\n        const { name, value } = e.target\n        this.setState({\n            [name]: value\n        })\n\n    }\n    onSubmit = () => {\n        this.props.handleSumitNode(this.state)\n    }\n    render() {\n        return (\n            <div>\n                <table>\n                    <tr>\n                        <th>variodId</th>\n                        <th>zpredict</th>\n                        <th>estimation</th>\n                        <th>predictError</th>\n                    </tr>\n                    {\n                        this.props.predict.map(({ variodId, zpredict, estimation, predictError }) => {\n                            return (\n                                <tr>\n                                    <td>{variodId}</td>\n                                    <td>{zpredict}</td>\n                                    <td>{estimation}</td>\n                                    <td>{predictError}</td>\n                                </tr>\n                            )\n                        })\n                    }\n                </table>\n                <p>nugget</p>\n                <input onChange={this.onChangeText} name=\"nugget\" />\n                <p>sill</p>\n                <input onChange={this.onChangeText} name=\"sill\" />\n                <p>range</p>\n                <input onChange={this.onChangeText} name=\"range\" />\n                <br></br>\n                <button onClick={this.onSubmit} >ADD NODE</button>\n            </div>\n        )\n    }\n}\nconst mapDisPatchToProps = (dispatch) => {\n    return {\n        handleSumitNode: (value) => dispatch(addvariogram(value))\n    }\n}\nconst mapStoreToProps = (store) => {\n    return {\n        predict: store.Predict\n    }\n}\nexport default connect(mapStoreToProps, mapDisPatchToProps)(Variogram)","const RMSE = require('rmse')\nconst reduceParser = (\n  lookupTable, model) => (acc, next) => {\n    return [\n      ...acc,\n      {\n        actual: next.attitude,\n        // predicted: lookupTable[next.id].predictAttitude[model]\n      }\n    ]\n  }\nexport const getZoneRMSE = (zones, lookupTable) => {\n\n  const groupModelExponential = zones.reduce(reduceParser(\n    lookupTable,\n    'exponential'\n  ), [])\n  const groupModelExponentialConst = zones.reduce(reduceParser(\n    lookupTable,\n    'exponentialWithConstant'\n  ), [])\n  const groupModelExponentialWithKIteration = zones.reduce(reduceParser(\n    lookupTable,\n    'exponentialWithKIteration'\n  ), [])\n  const groupModelGaussian = zones.reduce(reduceParser(\n    lookupTable,\n    'gaussian'\n  ), [])\n  const groupModelLinear = zones.reduce(reduceParser(\n    lookupTable,\n    'linear'\n  ), [])\n  const groupModelPentaspherical = zones.reduce(reduceParser(\n    lookupTable,\n    'pentaspherical'\n  ), [])\n  const groupModelSpherical = zones.reduce(reduceParser(\n    lookupTable,\n    'spherical'\n  ), [])\n  const groupModelTrendlinel = zones.reduce(reduceParser(\n    lookupTable,\n    'trendline'\n  ), [])\n\n\n  const rmseExponential = RMSE.rmse(groupModelExponential)\n  const rmseExponentialConst = RMSE.rmse(groupModelExponentialConst)\n  const rmseExponentialWithKIteration = RMSE.rmse(groupModelExponentialWithKIteration)\n  const rmseGaussian = RMSE.rmse(groupModelGaussian)\n  const rmseLinear = RMSE.rmse(groupModelLinear)\n  const rmsePentaspherical = RMSE.rmse(groupModelPentaspherical)\n  const rmseSpherical = RMSE.rmse(groupModelSpherical)\n  const rmseTrendlinel = RMSE.rmse(groupModelTrendlinel)\n  const errors = {\n    'exponential': rmseExponential,\n    'exponentialWithConstant': rmseExponentialConst,\n    'exponentialWithKIteration': rmseExponentialWithKIteration,\n    'gaussian': rmseGaussian,\n    'linear': rmseLinear,\n    'pentaspherical': rmsePentaspherical,\n    'spherical': rmseSpherical,\n    'trendline': rmseTrendlinel,\n  }\n  let key = Object.keys(errors).reduce((key, v) => errors[v] < errors[key] ? v : key);\n  return {\n    errors,\n    key\n  }\n}","import dayjs from 'dayjs';\nimport React from 'react'\nimport { max, min, mean } from 'simple-statistics';\nimport { getZoneRMSE } from '../Utils/calculateRMSEzone';\n\nconst models = (isShowConstant) => ([\n  'exponential',\n  ...(isShowConstant ? ['exponentialWithConstant'] : []),\n  'exponentialWithKIteration',\n  'gaussian',\n  'linear',\n  'pentaspherical',\n  'spherical',\n  'trendline',\n])\n\nconst ZoneBody = ({ zoneNumber, zoneBodyData, nodeLookupTable, isShowConstant, slopeList, inputSlope,\n  errorAndSelectedModel, time }) => {\n\n  const nodeId = zoneBodyData.id\n  const predictAttitude = nodeLookupTable[nodeId].predictAttitude\n  const isLessThjanInputSlope = inputSlope && slopeList[zoneNumber] > inputSlope\n  const { key, errors } = errorAndSelectedModel\n  return (\n    <tr key={zoneBodyData.id + '-' + slopeList[zoneNumber]}>\n      <td>{Number(zoneNumber) + 1}</td>\n      <td>{zoneBodyData.latitude}</td>\n      <td>{zoneBodyData.longtitude}</td>\n      <td>{zoneBodyData.attitude}</td>\n      {\n        models(isShowConstant).map((model) => {\n          const tempModel = isLessThjanInputSlope ? key : model;\n\n          return (<td key={zoneBodyData.id + '-' + model + '-' + inputSlope + '-' + slopeList[zoneNumber]}>{predictAttitude[tempModel]}</td>)\n        })\n      }\n      <td>{slopeList[zoneNumber]}</td>\n      <td>{isLessThjanInputSlope ? key : 'use default'}</td>\n      {\n        models(isShowConstant).map((model) => {\n\n          return (<td key={zoneBodyData.id + '-' + model + '-' + inputSlope + '-' + errors[model]}>{errors[model]}</td>)\n        })\n      }\n      <td>{`${time.hours} h ${time.minutes} m ${time.seconds}s`}</td>\n    </tr>\n  )\n}\n\nconst ZoneTable = ({ zones, nodes, isShowConstant, inputSlope, startTime = dayjs(), endTime = dayjs() }) => {\n  const nodeLookupTable = nodes.reduce((acc, next) => {\n    const key = next.id\n    return {\n      ...acc,\n      [key]: {\n        ...next\n      }\n    }\n  }, {})\n  const zoneKeys = Object.keys(zones)\n  const errorAndKeyEachZone = []\n  for (let i = 0; i < zoneKeys.length; i++) {\n    const result = getZoneRMSE(zones[zoneKeys[i]], nodeLookupTable)\n    errorAndKeyEachZone.push({\n      zone: +zoneKeys[i] + 1,\n      ...result\n    })\n  }\n  const hours = endTime.diff(startTime, 'h');\n  const minutes = endTime.diff(startTime, 'm');\n  const seconds = endTime.diff(startTime, 's');\n  const time = {\n    seconds,\n    minutes,\n    hours\n  }\n\n  const getSlopeZone = zoneKeys.reduce((acc, next) => {\n    const nodesOfZone = zones[next]\n    const latArr = nodesOfZone.map(n => Number(n.latitude))\n    const lonArr = nodesOfZone.map(n => Number(n.longtitude))\n    const attArr = nodesOfZone.map(n => Number(n.attitude))\n\n    const maxLat = latArr.length > 1 ? max(latArr) : latArr[0]\n    const minlat = min(latArr)\n\n    const maxLon = max(lonArr)\n    const minLon = min(lonArr)\n\n    const maxAtt = mean(attArr)\n    const minAtt = min(attArr)\n\n    const slope = (maxAtt - minAtt) / Math.sqrt(\n      Math.pow(maxLat - minlat, 2) +\n      Math.pow(maxLon - minLon, 2)\n    )\n    const isOnlyOneInZone = nodesOfZone.length === 1\n    return {\n      ...acc,\n      [next]: !isOnlyOneInZone ? slope * 100 : 0\n    }\n\n  }, {})\n\n  return (\n    <div style={{ display: 'none' }}>\n      <table id=\"zone-table\">\n        <thead>\n          <tr>\n            <th>Zone</th>\n            <th>Latitude</th>\n            <th>Longtitude</th>\n            <th>Attitude</th>\n            <th>Predict Exponential</th>\n            {isShowConstant && <th>Predict Exponential With Constant</th>}\n            <th>Predict Exponential With K Iteration</th>\n            <th>Predict Gaussian</th>\n            <th>Predict Linear</th>\n            <th>Predict Pentaspherical</th>\n            <th>Predict Spherical</th>\n            <th>Predict Trendline</th>\n            <th>Slope %</th>\n            <th>Selected Model</th>\n            <th>Error Exponential</th>\n            {isShowConstant && <th>Error Exponential With Constant</th>}\n            <th>Error Exponential With K Iteration</th>\n            <th>Error Gaussian</th>\n            <th>Error Linear</th>\n            <th>Error Pentaspherical</th>\n            <th>Error Spherical</th>\n            <th>Error Trendline</th>\n            <th>Time HH:MM:SS</th>\n          </tr>\n        </thead>\n        <tbody>\n          {\n            zoneKeys.map((zoneNumber, index) => {\n              const zoneBody = zones[zoneNumber]\n              const errorAndSelectedModel = errorAndKeyEachZone[index]\n              return zoneBody.map((zoneBodyData) => <ZoneBody\n                key={zoneNumber + '-' + zoneBodyData.id}\n                zoneNumber={zoneNumber}\n                zoneBodyData={zoneBodyData}\n                nodeLookupTable={nodeLookupTable}\n                isShowConstant={isShowConstant}\n                slopeList={getSlopeZone}\n                inputSlope={inputSlope}\n                errorAndSelectedModel={errorAndSelectedModel}\n                time={time}\n              />)\n            })\n          }\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default ZoneTable","import React from 'react'\nimport ReactHTMLTableToExcel from \"react-html-table-to-excel\";\n\nconst ButtonExportExel = ({ onSlopeChange }) => {\n  return (\n\n    <div className=\"wrapper-export-excel\">\n      <ReactHTMLTableToExcel\n        id=\"table-calculate-node-result-button\"\n        className=\"download-table-xls-button\"\n        table=\"table-calculate-node-result\"\n        filename=\"prediction_calculate_result\"\n        sheet=\"prediction_calculate_result\"\n        buttonText=\"Download as prediction\"\n      />\n      <ReactHTMLTableToExcel\n        className=\"download-table-xls-button\"\n        table=\"error-table\"\n        filename=\"errorSheet\"\n        sheet=\"ErrorSheetxls\"\n        buttonText=\"Download as errors report\"\n      />\n      <ReactHTMLTableToExcel\n        id=\"test-table-xls-button\"\n        className=\"download-table-xls-button\"\n        table=\"zone-table\"\n        filename=\"zone_table_sheet\"\n        sheet=\"zones_table_sheet\"\n        buttonText=\"Download data zones\"\n      />\n      <input placeholder=\"ใส่ค่าความชัน %\" type=\"number\" onChange={(e) => {\n        const value = e.target.value\n        onSlopeChange(value)\n      }}></input>\n    </div>\n  )\n}\n\nexport default ButtonExportExel","import React, { Component } from \"react\";\n\nimport Plot from \"react-plotly.js\";\nimport memoize from \"fast-memoize\";\nimport { calCulateAttitude } from \"../Utils/calBestAttitude\";\nimport Loader from \"react-loader-spinner\";\nimport * as XLSX from \"xlsx\";\nimport getXYZ, { getZ } from \"../Utils/getXYZ\";\nimport { getAllErrorModel } from \"../Utils/getStatError\";\n\nimport createScatterGraph from \"../Utils/createScatterGraph\";\nimport { Chart } from \"react-google-charts\";\nimport getTrendlines from \"../Utils/getTrendlines\";\n// import { separatePoint } from \"../Utils/separatePoint\";\nimport ErrorTable from \"../components/ErrorTable\";\nimport NodeResultTable from \"../components/NodeResultTable\";\nimport { Link } from \"react-router-dom\";\nimport { findCenter, separateZone, withGenerateZone } from \"../Utils/separateNode\";\nimport ZoneTable from \"../components/ZoneTable\";\nimport ButtonExportExel from \"./ButtonGroupExportExcel\";\nimport dayjs from \"dayjs\";\nimport { buttonList } from \"../Utils/config\";\n\nconst memoizeCalCulateAttitude = memoize(calCulateAttitude);\nconst memoizeWithGenerateZone = memoize(withGenerateZone)\nclass NodeWithSeparate extends Component {\n  state = {\n    nodes: [{ id: 1, latitude: \"\", longtitude: \"\", attitude: \"\" }],\n    x: [],\n    y: [],\n    z: [],\n    loading: false,\n    variable: {\n      nugget: \"\",\n      sill: \"\",\n      range: \"\",\n    },\n    zones: [],\n    slope: '',\n    model: 'gaussian',\n    labelModel: 'Gussian Model'\n  };\n\n  addNode = () => {\n    const { nodes } = this.state;\n    const id = nodes.length + 1;\n    this.setState({\n      nodes: [\n        ...nodes,\n        {\n          id: id,\n          latitude: \"\",\n          longtitude: \"\",\n          attitude: \"\",\n        },\n      ],\n    });\n  };\n  onChangeFile = (e) => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n    reader.onload = (evt) => {\n      /* Parse data */\n      const bstr = evt.target.result;\n      const wb = XLSX.read(bstr, { type: \"binary\" });\n      /* Get first worksheet */\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n      const data = XLSX.utils.sheet_to_json(ws, { header: 1 });\n      /* Update state */\n      data.shift();\n      const transformDataNode = data.reduce((array, next, index) => {\n        return [\n          ...array,\n          {\n            id: index + 1,\n            latitude: next[0], //x\n            longtitude: next[1], //y\n            attitude: next[2], //z\n            predictAttitude: next[3], //p\n          },\n        ];\n      }, []);\n      this.setState({\n        nodes: transformDataNode,\n      });\n    };\n    reader.readAsBinaryString(file);\n  };\n  onChangeNode = (id) => (e) => {\n    const { nodes } = this.state;\n    const { name, value } = e.target;\n    const temp = nodes;\n    temp[id - 1][name] = value;\n    this.setState({\n      nodes: temp,\n    });\n  };\n  deleteNodes = (e) => {\n    const { nodes } = this.state;\n    const { id } = e.target;\n    const nodeIdTarget = parseInt(id);\n    const updateDeleteNode = nodes.filter(({ id }) => id !== nodeIdTarget);\n    this.setState({\n      nodes: updateDeleteNode,\n    });\n  };\n\n  onSubmit = () => {\n    const { nodes, loading, variable } = this.state;\n    this.setState({\n      loading: !loading,\n      start: dayjs()\n    });\n    const center = findCenter(nodes);\n    const zone = separateZone(nodes, center);\n    this.setState({\n      zones: zone\n    })\n    const lastNodeId = nodes[nodes.length - 1].id\n    const key = Object.keys(zone);\n\n    const semiVarioGramHash = {}\n    const allNodeRangeHash = {}\n    const bestSumHash = {}\n\n    for (let i = 0; i < key.length; i++) {\n      const selectedZone = zone[key[i]];\n      const {\n        bestSum,\n        allRangeOfNodes,\n        semiVarioGram,\n      } = memoizeCalCulateAttitude(selectedZone, variable);\n      semiVarioGramHash[i] = semiVarioGram\n      allNodeRangeHash[i] = allRangeOfNodes\n      bestSumHash[lastNodeId] = bestSum\n    }\n\n    const {\n      allRangeOfNodesTemp,\n      semiVarioGramTemp,\n      newNode,\n    } = memoizeWithGenerateZone(2, nodes.length, zone, variable, this.state.model, { semiVarioGramHash, allNodeRangeHash, bestSumHash })(memoizeCalCulateAttitude)\n    this.setState({\n      allRangeOfNodes: allRangeOfNodesTemp,\n      semiVarioGram: semiVarioGramTemp,\n      nodes: newNode.sort((a, b) => a.id < b.id),\n      loading: false,\n      end: dayjs()\n    });\n    console.timeEnd(\"start\");\n  };\n\n  handleChangeModel = (label) => (e) => {\n    const value = e.target.value;\n    this.setState({\n      model: value,\n      labelModel: label\n    });\n  };\n\n  handleChangeValue = (e) => {\n    const { name, value } = e.target;\n    this.setState({\n      variable: {\n        ...this.state.variable,\n        [name]: value,\n      },\n    });\n  };\n\n  onSlopeChange = (value) => {\n    this.setState({\n      ...this.state,\n      slope: value\n    })\n  }\n  render() {\n    const {\n      nodes,\n      loading,\n      lastPredictNode = false,\n      allRangeOfNodes,\n      semiVarioGram,\n      model = \"gaussian\",\n      variable,\n      zones,\n      slope\n    } = this.state;\n    const transformDataNode = nodes.sort((a, b) => {\n      if (a.id > b.id) {\n        return 1;\n      }\n      return -1;\n    });\n    const isAllNodeHavePredict = nodes.every(\n      ({ predictAttitude }) => predictAttitude !== undefined\n    );\n    const scatterGraph = isAllNodeHavePredict\n      ? createScatterGraph(allRangeOfNodes, semiVarioGram, model, this.state.labelModel || \"Gussian Model\")\n      : false;\n    const x = getXYZ(transformDataNode, \"latitude\");\n    const y = getXYZ(transformDataNode, \"longtitude\");\n    const z = isAllNodeHavePredict ? getZ(transformDataNode, model) : [];\n    const error = isAllNodeHavePredict\n      ? getAllErrorModel(transformDataNode)\n      : false;\n\n    const trendlineData = isAllNodeHavePredict\n      ? getTrendlines(allRangeOfNodes, semiVarioGram[model]).filter(([a, b]) => b !== 1)\n      : [];\n\n    const data = [[\"Distance\", \"Semivariance\"], ...trendlineData];\n    const options = {\n      title: \"Exponential Polynomial Trendline\",\n      legend: 'bottom',\n      crosshair: { trigger: \"both\", orientation: \"both\" },\n      trendlines: {\n        0: {\n          type: \"polynomial\",\n          degree: 3,\n          visibleInLegend: true,\n        },\n      },\n      vAxis: { title: 'Semivariance' },\n      hAxis: { title: 'Distance' },\n    };\n    const isDisabledSubmit = !variable.nugget && !variable.sill && !variable.range\n\n    return (\n      <div className=\"container-graph\">\n        {loading && (\n          <div className=\"modal\">\n            <Loader type=\"Puff\" color=\"#00BFFF\" height=\"100\" width=\"100\" />\n          </div>\n        )}\n\n        <div style={{ margin: \"15px\" }}>\n          <Link style={{ marginRight: \"15px\" }} to=\"/\">1 x 1 zone</Link>\n          <Link style={{ marginRight: \"15px\" }} to=\"/separate\">2 x 2 zones</Link>\n          <Link style={{ marginRight: \"15px\" }} to=\"/nine-separate\">3 x 3 zones</Link>\n          <Link to=\"/sixteen-separate\">4 x 4 zones</Link>\n          <h1>\n            {this.state.labelModel || \"Gussian Model\"}\n          </h1>\n          <div>\n            <h1>Model Selection</h1>\n            {buttonList.map(({ label, model }) => {\n              return (\n                <button onClick={this.handleChangeModel(label)} value={model}>\n                  {label}\n                </button>\n              )\n            })\n            }\n          </div>\n          <h1>Node list</h1>\n          <input\n            name=\"nugget\"\n            placeholder=\"nugget\"\n            onChange={this.handleChangeValue}\n          />\n          <input\n            name=\"sill\"\n            placeholder=\"sill\"\n            onChange={this.handleChangeValue}\n          />\n          <input\n            name=\"range\"\n            placeholder=\"range\"\n            onChange={this.handleChangeValue}\n          />\n          <div className=\"input-node-title\">\n            <p className=\"node-p-id\">ID</p>\n            <p className=\"node-unit\">Latitude</p>\n            <p className=\"node-unit\">Longtitude</p>\n            <p className=\"node-unit\">Altitude</p>\n            <p className=\"node-unit\">Predicted Altitude</p>\n          </div>\n\n          {transformDataNode.map(\n            ({ id, latitude, longtitude, attitude, predictAttitude }) => {\n              return (\n                <div key={id + latitude.toString()} className=\"input-node\">\n                  <div className=\"id-node\">\n                    <p>{id}</p>\n                  </div>\n                  <div>\n                    <input\n                      onChange={this.onChangeNode(id)}\n                      name=\"latitude\"\n                      value={latitude || \"\"}\n                    ></input>\n                  </div>\n                  <div>\n                    <input\n                      onChange={this.onChangeNode(id)}\n                      name=\"longtitude\"\n                      value={longtitude || \"\"}\n                    ></input>\n                  </div>\n                  <div>\n                    <input\n                      onChange={this.onChangeNode(id)}\n                      name=\"attitude\"\n                      value={attitude || \"\"}\n                    ></input>\n                  </div>\n                  <div>\n                    <input\n                      onChange={this.onChangeNode(id)}\n                      name=\"predictAttitude\"\n                      value={isAllNodeHavePredict ? predictAttitude[model] : \"\"}\n                    ></input>\n                  </div>\n                  <div>\n                    <button id={id} onClick={this.deleteNodes}>\n                      Delete\n                    </button>\n                  </div>\n                </div>\n              );\n            }\n          )}\n\n          <input onChange={this.onChangeFile} type=\"file\"></input>\n          <button onClick={this.addNode}>ADD NODE</button>\n          <button onClick={this.onSubmit} disabled={isDisabledSubmit}>Submit</button>\n          {error && (\n            <ButtonExportExel\n              onSlopeChange={this.onSlopeChange}\n            />\n          )}\n        </div>\n\n        <div className=\"graph\">\n          {scatterGraph && (\n            <Plot\n              data={scatterGraph}\n              layout={{\n                width: 900,\n                height: 600,\n                title: \"Semivariogram Analysis\",\n                xaxis: {\n                  title: \"Distance\",\n                },\n                yaxis: {\n                  title: \"Semivariogram\",\n                },\n              }}\n            />\n          )}\n          {isAllNodeHavePredict ? (\n            <Plot\n              data={[\n                {\n                  x: x,\n                  y: y,\n                  z: z,\n                  type: \"mesh3d\",\n                  showscale: true,\n                  intensity: z,\n                  colorscale: [\n                    [0, 'rgb(0, 0, 255)'],\n                    [0.5, 'rgb(0, 128, 0)'],\n                    [1, 'rgb(255, 255, 0)']\n                  ],\n                  colorbar: {\n                    title: 'Predicted Altitude'\n                  },\n                },\n              ]}\n              layout={{\n                width: 900, height: 600, title: \"3D Surface Plots\",\n                scene: {\n                  aspectratio: {\n                    x: 1,\n                    y: 1,\n                    z: 0.5\n                  },\n                  zaxis: {\n                    title: 'Predicted Altitude',\n                    backgroundcolor: 'rgb(230,230,200)',\n                    showbackground: true,\n                    zerolinecolor: 'white',\n                    gridcolor: 'white',\n                    nticks: 20,\n\n\n                  },\n                  yaxis: {\n                    title: 'Longtitude',\n                    nticks: 10,\n                    backgroundcolor: 'rgb(230,230,200)',\n                    showbackground: true,\n                    zerolinecolor: 'white',\n                    gridcolor: 'white',\n                  },\n                  xaxis: {\n                    title: 'Latitude',\n                    nticks: 10,\n                    backgroundcolor: 'rgb(230,230,200)',\n                    showbackground: true,\n                    zerolinecolor: 'white',\n                    gridcolor: 'white',\n                  }\n                }\n              }}\n            />\n          ) : null}\n          {isAllNodeHavePredict ? (\n            <Plot\n              data={[\n                {\n                  x: x,\n                  y: y,\n                  z: z,\n                  intensity: z,\n                  type: \"contour\",\n                  contours: {\n                    showlabels: true,\n                    labelfont: {\n                      family: 'Raleway',\n                      size: 12,\n                      color: 'white',\n                    }\n                  },\n                  colorscale: [\n                    [0, 'rgb(0, 0, 255)'],\n                    [0.5, 'rgb(0, 128, 0)'],\n                    [1, 'rgb(255, 255, 0)']\n                  ],\n                  colorbar: {\n                    title: 'Predicted Altitude'\n                  },\n                },\n              ]}\n              layout={{\n                width: 900,\n                height: 600,\n                title: \"Contour Plots\",\n                scene: {\n                  aspectratio: {\n                    x: 1,\n                    y: 1,\n                    z: 0.5\n                  },\n                  zaxis: {\n                    title: 'Predicted Altitude',\n                    backgroundcolor: 'rgb(230,230,200)',\n                    showbackground: true,\n                    zerolinecolor: 'white',\n                    gridcolor: 'white',\n                    nticks: 20,\n\n\n                  },\n                  yaxis: {\n                    title: 'Longtitude',\n                    nticks: 10,\n                    backgroundcolor: 'rgb(230,230,200)',\n                    showbackground: true,\n                    zerolinecolor: 'white',\n                    gridcolor: 'white',\n                  },\n                  xaxis: {\n                    title: 'Latitude',\n                    nticks: 10,\n                    backgroundcolor: 'rgb(230,230,200)',\n                    showbackground: true,\n                    zerolinecolor: 'white',\n                    gridcolor: 'white',\n                  }\n                }\n              }}\n            />\n          ) : null}\n\n          {trendlineData.length > 0 && (\n            <Chart\n              chartType=\"ScatterChart\"\n              width=\"900px\"\n              height=\"600px\"\n              data={data}\n              options={options}\n              legendToggle\n            />\n          )}\n\n          <ZoneTable\n            zones={zones}\n            nodes={transformDataNode}\n            isShowConstant={\n              !!variable.nugget && !!variable.sill && !!variable.range\n            }\n            inputSlope={slope}\n            startTime={this.state.start}\n            endTime={this.state.end}\n          />\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default NodeWithSeparate;\n","import React, { Component } from \"react\";\nimport ReactHTMLTableToExcel from \"react-html-table-to-excel\";\n\nimport Plot from \"react-plotly.js\";\nimport memoize from \"fast-memoize\";\nimport { calCulateAttitude } from \"../Utils/calBestAttitude\";\nimport Loader from \"react-loader-spinner\";\nimport * as XLSX from \"xlsx\";\nimport getXYZ, { getZ } from \"../Utils/getXYZ\";\nimport { getAllErrorModel } from \"../Utils/getStatError\";\n\nimport createScatterGraph from \"../Utils/createScatterGraph\";\nimport { Chart } from \"react-google-charts\";\nimport getTrendlines from \"../Utils/getTrendlines\";\n// import { separatePoint } from \"../Utils/separatePoint\";\nimport ErrorTable from \"../components/ErrorTable\";\nimport NodeResultTable from \"../components/NodeResultTable\";\nimport { Link } from \"react-router-dom\";\nimport { separateNineZone, withGenerateZone } from \"../Utils/separateNode\";\nimport ZoneTable from \"../components/ZoneTable\";\nimport ButtonExportExel from \"./ButtonGroupExportExcel\";\nimport dayjs from \"dayjs\";\nimport { buttonList } from \"../Utils/config\";\n\nconst memoizeCalCulateAttitude = memoize(calCulateAttitude);\nconst memoizeWithGenerateZone = memoize(withGenerateZone)\n\nclass NodeWithSeparate extends Component {\n  state = {\n    nodes: [{ id: 1, latitude: \"\", longtitude: \"\", attitude: \"\" }],\n    x: [],\n    y: [],\n    z: [],\n    loading: false,\n    variable: {\n      nugget: \"\",\n      sill: \"\",\n      range: \"\",\n    },\n    zones: [],\n    slope: '',\n    model: 'gaussian',\n    labelModel: 'Gussian Model'\n  };\n\n  addNode = () => {\n    const { nodes } = this.state;\n    const id = nodes.length + 1;\n    this.setState({\n      nodes: [\n        ...nodes,\n        {\n          id: id,\n          latitude: \"\",\n          longtitude: \"\",\n          attitude: \"\",\n        },\n      ],\n    });\n  };\n  onChangeFile = (e) => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n    reader.onload = (evt) => {\n      /* Parse data */\n      const bstr = evt.target.result;\n      const wb = XLSX.read(bstr, { type: \"binary\" });\n      /* Get first worksheet */\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n      const data = XLSX.utils.sheet_to_json(ws, { header: 1 });\n      /* Update state */\n      data.shift();\n      const transformDataNode = data.reduce((array, next, index) => {\n        return [\n          ...array,\n          {\n            id: index + 1,\n            latitude: next[0], //x\n            longtitude: next[1], //y\n            attitude: next[2], //z\n            predictAttitude: next[3], //p\n          },\n        ];\n      }, []);\n      this.setState({\n        nodes: transformDataNode,\n      });\n    };\n    reader.readAsBinaryString(file);\n  };\n  onChangeNode = (id) => (e) => {\n    const { nodes } = this.state;\n    const { name, value } = e.target;\n    const temp = nodes;\n    temp[id - 1][name] = value;\n    this.setState({\n      nodes: temp,\n    });\n  };\n  deleteNodes = (e) => {\n    const { nodes } = this.state;\n    const { id } = e.target;\n    const nodeIdTarget = parseInt(id);\n    const updateDeleteNode = nodes.filter(({ id }) => id !== nodeIdTarget);\n    this.setState({\n      nodes: updateDeleteNode,\n    });\n  };\n\n  onSubmit = () => {\n    const { nodes, loading, variable } = this.state;\n    this.setState({\n      loading: !loading,\n      start: dayjs()\n    });\n    const zone = separateNineZone(nodes);\n    this.setState({\n      zones: zone\n    })\n    const lastNodeId = nodes[nodes.length - 1].id\n    const key = Object.keys(zone);\n\n    const semiVarioGramHash = {}\n    const allNodeRangeHash = {}\n    const bestSumHash = {}\n\n    for (let i = 0; i < key.length; i++) {\n      const selectedZone = zone[key[i]];\n      const {\n        bestSum,\n        allRangeOfNodes,\n        semiVarioGram,\n      } = memoizeCalCulateAttitude(selectedZone, variable);\n      semiVarioGramHash[i] = semiVarioGram\n      allNodeRangeHash[i] = allRangeOfNodes\n      bestSumHash[lastNodeId] = bestSum\n    }\n\n    const {\n      allRangeOfNodesTemp,\n      semiVarioGramTemp,\n      newNode,\n    } = memoizeWithGenerateZone(3, nodes.length, zone, variable, this.state.model, { semiVarioGramHash, allNodeRangeHash, bestSumHash })(memoizeCalCulateAttitude)\n    this.setState({\n      allRangeOfNodes: allRangeOfNodesTemp,\n      semiVarioGram: semiVarioGramTemp,\n      nodes: newNode.sort((a, b) => a.id < b.id),\n      loading: false,\n      end: dayjs()\n    });\n  };\n\n  handleChangeModel = (label) => (e) => {\n    const value = e.target.value;\n    this.setState({\n      model: value,\n      labelModel: label\n    });\n  };\n\n  handleChangeValue = (e) => {\n    const { name, value } = e.target;\n    this.setState({\n      variable: {\n        ...this.state.variable,\n        [name]: value,\n      },\n    });\n  };\n\n  onSlopeChange = (value) => {\n    this.setState({\n      ...this.state,\n      slope: value\n    })\n  }\n\n  render() {\n    const {\n      nodes,\n      loading,\n      lastPredictNode = false,\n      allRangeOfNodes,\n      semiVarioGram,\n      model = \"gaussian\",\n      variable,\n      zones,\n      slope\n    } = this.state;\n    const transformDataNode = nodes.sort((a, b) => {\n      if (a.id > b.id) {\n        return 1;\n      }\n      return -1;\n    });\n    const isAllNodeHavePredict = nodes.every(\n      ({ predictAttitude }) => predictAttitude !== undefined\n    );\n    const scatterGraph = isAllNodeHavePredict\n      ? createScatterGraph(allRangeOfNodes, semiVarioGram, model, this.state.labelModel || \"Gussian Model\")\n      : false;\n    const x = getXYZ(transformDataNode, \"latitude\");\n    const y = getXYZ(transformDataNode, \"longtitude\");\n    const z = isAllNodeHavePredict ? getZ(transformDataNode, model) : [];\n    const error = isAllNodeHavePredict\n      ? getAllErrorModel(transformDataNode)\n      : false;\n\n    const trendlineData = isAllNodeHavePredict\n      ? getTrendlines(allRangeOfNodes, semiVarioGram[\"gaussian\"]).filter(([a, b]) => b !== 1)\n      : [];\n\n    const data = [[\"Distance\", \"Semivariance\"], ...trendlineData];\n    const options = {\n      title: \"Exponential Polynomial Trendline\",\n      legend: 'bottom',\n      crosshair: { trigger: \"both\", orientation: \"both\" },\n      trendlines: {\n        0: {\n          type: \"polynomial\",\n          degree: 3,\n          visibleInLegend: true,\n        },\n      },\n      vAxis: { title: 'Semivariance' },\n      hAxis: { title: 'Distance' },\n    };\n    const isDisabledSubmit = !variable.nugget && !variable.sill && !variable.range\n\n    return (\n      <div className=\"container-graph\">\n        {loading && (\n          <div className=\"modal\">\n            <Loader type=\"Puff\" color=\"#00BFFF\" height=\"100\" width=\"100\" />\n          </div>\n        )}\n\n        <div style={{ margin: \"15px\" }}>\n          <Link style={{ marginRight: \"15px\" }} to=\"/\">1 x 1 zone</Link>\n          <Link style={{ marginRight: \"15px\" }} to=\"/separate\">2 x 2 zones</Link>\n          <Link style={{ marginRight: \"15px\" }} to=\"/nine-separate\">3 x 3 zones</Link>\n          <Link to=\"/sixteen-separate\">4 x 4 zones</Link>\n          <h1>\n            {this.state.labelModel || \"Gussian Model\"}\n          </h1>\n          <div>\n            <h1>Model Selection</h1>\n            {\n              buttonList.map(({ label, model }) => {\n                return (\n                  <button key={label + '-' + model} onClick={this.handleChangeModel(label)} value={model}>\n                    {label}\n                  </button>\n                )\n              })\n            }\n          </div>\n          <h1>Node list</h1>\n          <input\n            name=\"nugget\"\n            placeholder=\"nugget\"\n            onChange={this.handleChangeValue}\n          />\n          <input\n            name=\"sill\"\n            placeholder=\"sill\"\n            onChange={this.handleChangeValue}\n          />\n          <input\n            name=\"range\"\n            placeholder=\"range\"\n            onChange={this.handleChangeValue}\n          />\n          <div className=\"input-node-title\">\n            <p className=\"node-p-id\">ID</p>\n            <p className=\"node-unit\">Latitude</p>\n            <p className=\"node-unit\">Longtitude</p>\n            <p className=\"node-unit\">Altitude</p>\n            <p className=\"node-unit\">Predicted Altitude</p>\n          </div>\n\n          {transformDataNode.map(\n            ({ id, latitude, longtitude, attitude, predictAttitude }) => {\n              return (\n                <div key={id + latitude.toString()} className=\"input-node\">\n                  <div className=\"id-node\">\n                    <p>{id}</p>\n                  </div>\n                  <div>\n                    <input\n                      onChange={this.onChangeNode(id)}\n                      name=\"latitude\"\n                      value={latitude || \"\"}\n                    ></input>\n                  </div>\n                  <div>\n                    <input\n                      onChange={this.onChangeNode(id)}\n                      name=\"longtitude\"\n                      value={longtitude || \"\"}\n                    ></input>\n                  </div>\n                  <div>\n                    <input\n                      onChange={this.onChangeNode(id)}\n                      name=\"attitude\"\n                      value={attitude || \"\"}\n                    ></input>\n                  </div>\n                  <div>\n                    <input\n                      onChange={this.onChangeNode(id)}\n                      name=\"predictAttitude\"\n                      value={isAllNodeHavePredict ? predictAttitude[model] : \"\"}\n                    ></input>\n                  </div>\n                  <div>\n                    <button id={id} onClick={this.deleteNodes}>\n                      Delete\n                    </button>\n                  </div>\n                </div>\n              );\n            }\n          )}\n\n          <input onChange={this.onChangeFile} type=\"file\"></input>\n          <button onClick={this.addNode}>ADD NODE</button>\n          <button onClick={this.onSubmit} disabled={isDisabledSubmit}>Submit</button>\n          {error && (\n            <ButtonExportExel\n              onSlopeChange={this.onSlopeChange}\n            />\n\n          )}\n        </div>\n\n        <div className=\"graph\">\n          {error && (\n            <>\n              <ErrorTable\n                error={error}\n                semiVarioGram={semiVarioGram}\n                variable={variable}\n              />\n\n              <NodeResultTable list={transformDataNode} />\n            </>\n          )}\n          {scatterGraph && (\n            <Plot\n              data={scatterGraph}\n              layout={{\n                width: 900,\n                height: 600,\n                title: \"Semivariogram Analysis\",\n                xaxis: {\n                  title: \"Distance\",\n                },\n                yaxis: {\n                  title: \"Semivariogram\",\n                },\n              }}\n            />\n          )}\n          {isAllNodeHavePredict ? (\n            <Plot\n              data={[\n                {\n                  x: x,\n                  y: y,\n                  z: z,\n                  type: \"mesh3d\",\n                  showscale: true,\n                  intensity: z,\n                  colorscale: [\n                    [0, 'rgb(0, 0, 255)'],\n                    [0.5, 'rgb(0, 128, 0)'],\n                    [1, 'rgb(255, 255, 0)']\n                  ],\n                  colorbar: {\n                    title: 'Predicted Altitude'\n                  },\n                },\n              ]}\n              layout={{\n                width: 900, height: 600, title: \"3D Surface Plots\",\n                scene: {\n                  aspectratio: {\n                    x: 1,\n                    y: 1,\n                    z: 0.5\n                  },\n                  zaxis: {\n                    title: 'Predicted Altitude',\n                    backgroundcolor: 'rgb(230,230,200)',\n                    showbackground: true,\n                    zerolinecolor: 'white',\n                    gridcolor: 'white',\n                    nticks: 20,\n\n\n                  },\n                  yaxis: {\n                    title: 'Longtitude',\n                    nticks: 10,\n                    backgroundcolor: 'rgb(230,230,200)',\n                    showbackground: true,\n                    zerolinecolor: 'white',\n                    gridcolor: 'white',\n                  },\n                  xaxis: {\n                    title: 'Latitude',\n                    nticks: 10,\n                    backgroundcolor: 'rgb(230,230,200)',\n                    showbackground: true,\n                    zerolinecolor: 'white',\n                    gridcolor: 'white',\n                  }\n                }\n              }}\n            />\n          ) : null}\n          {isAllNodeHavePredict ? (\n            <Plot\n              data={[\n                {\n                  x: x,\n                  y: y,\n                  z: z,\n                  intensity: z,\n                  type: \"contour\",\n                  contours: {\n                    showlabels: true,\n                    labelfont: {\n                      family: 'Raleway',\n                      size: 12,\n                      color: 'white',\n                    }\n                  },\n                  colorscale: [\n                    [0, 'rgb(0, 0, 255)'],\n                    [0.5, 'rgb(0, 128, 0)'],\n                    [1, 'rgb(255, 255, 0)']\n                  ],\n                  colorbar: {\n                    title: 'Predicted Altitude'\n                  },\n                },\n              ]}\n              layout={{\n                width: 900,\n                height: 600,\n                title: \"Contour Plots\",\n                scene: {\n                  aspectratio: {\n                    x: 1,\n                    y: 1,\n                    z: 0.5\n                  },\n                  zaxis: {\n                    title: 'Predicted Altitude',\n                    backgroundcolor: 'rgb(230,230,200)',\n                    showbackground: true,\n                    zerolinecolor: 'white',\n                    gridcolor: 'white',\n                    nticks: 20,\n\n\n                  },\n                  yaxis: {\n                    title: 'Longtitude',\n                    nticks: 10,\n                    backgroundcolor: 'rgb(230,230,200)',\n                    showbackground: true,\n                    zerolinecolor: 'white',\n                    gridcolor: 'white',\n                  },\n                  xaxis: {\n                    title: 'Latitude',\n                    nticks: 10,\n                    backgroundcolor: 'rgb(230,230,200)',\n                    showbackground: true,\n                    zerolinecolor: 'white',\n                    gridcolor: 'white',\n                  }\n                }\n              }}\n            />\n          ) : null}\n          {trendlineData.length > 0 && (\n            <Chart\n              chartType=\"ScatterChart\"\n              width=\"900px\"\n              height=\"600px\"\n              data={data}\n              options={options}\n              legendToggle\n            />\n          )}\n\n          <ZoneTable\n            zones={zones}\n            nodes={transformDataNode}\n            isShowConstant={\n              !!variable.nugget && !!variable.sill && !!variable.range\n            }\n            inputSlope={slope}\n            startTime={this.state.start}\n            endTime={this.state.end}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default NodeWithSeparate;\n","import { findCenter, separateZone } from \"./separateNode\"\n\nexport const separateSixTeenZone = (zone) => {\n  const sixteenZone = {}\n  const arr = []\n  const keys = Object.keys(zone)\n  for (let i = 0; i < Object.keys(zone).length; i++) {\n    const newCenter = findCenter(zone[keys[i]])\n    const newZone = separateZone(zone[keys[i]], newCenter)\n    const value = Object.values(newZone)\n    arr.push(...value)\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i].length > 0) {\n      sixteenZone[i] = [\n        ...arr[i]\n      ]\n    }\n  }\n  return sixteenZone\n}\n","import React, { Component } from \"react\";\nimport ReactHTMLTableToExcel from \"react-html-table-to-excel\";\n\nimport Plot from \"react-plotly.js\";\nimport memoize from \"fast-memoize\";\nimport { calCulateAttitude } from \"../Utils/calBestAttitude\";\nimport Loader from \"react-loader-spinner\";\nimport * as XLSX from \"xlsx\";\nimport getXYZ, { getZ } from \"../Utils/getXYZ\";\nimport { getAllErrorModel } from \"../Utils/getStatError\";\nimport computePredict, {\n  transformSemiVarioGramWithSeparateNode,\n} from \"../Utils/computePredict\";\nimport createScatterGraph from \"../Utils/createScatterGraph\";\nimport { Chart } from \"react-google-charts\";\nimport getTrendlines from \"../Utils/getTrendlines\";\n// import { separatePoint } from \"../Utils/separatePoint\";\nimport ErrorTable from \"../components/ErrorTable\";\nimport NodeResultTable from \"../components/NodeResultTable\";\nimport { Link } from \"react-router-dom\";\nimport { findCenter, separateZone, withGenerateZone } from \"../Utils/separateNode\";\nimport { separateSixTeenZone } from \"../Utils/separateSixTeenZone\";\nimport ZoneTable from \"../components/ZoneTable\";\nimport ButtonExportExel from \"./ButtonGroupExportExcel\";\nimport dayjs from \"dayjs\";\nimport { buttonList } from \"../Utils/config\";\n\nconst memoizeCalCulateAttitude = memoize(calCulateAttitude);\nconst memoizeWithGenerateZone = memoize(withGenerateZone)\n\nclass NodeSixTeenZone extends Component {\n  state = {\n    nodes: [{ id: 1, latitude: \"\", longtitude: \"\", attitude: \"\" }],\n    x: [],\n    y: [],\n    z: [],\n    loading: false,\n    variable: {\n      nugget: \"\",\n      sill: \"\",\n      range: \"\",\n    },\n    zones: [],\n    slope: '',\n    model: 'gaussian',\n    labelModel: 'Gussian Model'\n  };\n\n  addNode = () => {\n    const { nodes } = this.state;\n    const id = nodes.length + 1;\n    this.setState({\n      nodes: [\n        ...nodes,\n        {\n          id: id,\n          latitude: \"\",\n          longtitude: \"\",\n          attitude: \"\",\n        },\n      ],\n    });\n  };\n  onChangeFile = (e) => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n    reader.onload = (evt) => {\n      /* Parse data */\n      const bstr = evt.target.result;\n      const wb = XLSX.read(bstr, { type: \"binary\" });\n      /* Get first worksheet */\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n      const data = XLSX.utils.sheet_to_json(ws, { header: 1 });\n      /* Update state */\n      data.shift();\n      const transformDataNode = data.reduce((array, next, index) => {\n        return [\n          ...array,\n          {\n            id: index + 1,\n            latitude: next[0], //x\n            longtitude: next[1], //y\n            attitude: next[2], //z\n            predictAttitude: next[3], //p\n          },\n        ];\n      }, []);\n      this.setState({\n        nodes: transformDataNode,\n      });\n    };\n    reader.readAsBinaryString(file);\n  };\n  onChangeNode = (id) => (e) => {\n    const { nodes } = this.state;\n    const { name, value } = e.target;\n    const temp = nodes;\n    temp[id - 1][name] = value;\n    this.setState({\n      nodes: temp,\n    });\n  };\n  deleteNodes = (e) => {\n    const { nodes } = this.state;\n    const { id } = e.target;\n    const nodeIdTarget = parseInt(id);\n    const updateDeleteNode = nodes.filter(({ id }) => id !== nodeIdTarget);\n    this.setState({\n      nodes: updateDeleteNode,\n    });\n  };\n\n  onSubmit = () => {\n    const { nodes, loading, variable } = this.state;\n    this.setState({\n      loading: !loading,\n      start: dayjs()\n    });\n    const center = findCenter(nodes);\n\n    const zoneFours = separateZone(nodes, center);\n    const zone = separateSixTeenZone(zoneFours)\n    this.setState({\n      zones: zone\n    })\n    const lastNodeId = nodes[nodes.length - 1].id\n    const key = Object.keys(zone);\n\n    const semiVarioGramHash = {}\n    const allNodeRangeHash = {}\n    const bestSumHash = {}\n\n    for (let i = 0; i < key.length; i++) {\n      const selectedZone = zone[key[i]];\n      const {\n        bestSum,\n        allRangeOfNodes,\n        semiVarioGram,\n      } = memoizeCalCulateAttitude(selectedZone, variable);\n      semiVarioGramHash[i] = semiVarioGram\n      allNodeRangeHash[i] = allRangeOfNodes\n      bestSumHash[lastNodeId] = bestSum\n    }\n\n    const {\n      allRangeOfNodesTemp,\n      semiVarioGramTemp,\n      newNode,\n    } = memoizeWithGenerateZone(4, nodes.length, zone, variable, this.state.model, { semiVarioGramHash, allNodeRangeHash, bestSumHash })(memoizeCalCulateAttitude)\n\n    this.setState({\n      allRangeOfNodes: allRangeOfNodesTemp,\n      semiVarioGram: semiVarioGramTemp,\n      nodes: newNode.sort((a, b) => a.id < b.id),\n      loading: false,\n      end: dayjs()\n    });\n    console.timeEnd(\"start\");\n  };\n  handleChangeModel = (label) => (e) => {\n    const value = e.target.value;\n    this.setState({\n      model: value,\n      labelModel: label\n    });\n  };\n  handleChangeValue = (e) => {\n    const { name, value } = e.target;\n    this.setState({\n      variable: {\n        ...this.state.variable,\n        [name]: value,\n      },\n    });\n  };\n\n  onSlopeChange = (value) => {\n    this.setState({\n      ...this.state,\n      slope: value\n    })\n  }\n  render() {\n    const {\n      nodes,\n      loading,\n      lastPredictNode = false,\n      allRangeOfNodes,\n      semiVarioGram,\n      model = \"gaussian\",\n      variable,\n      zones,\n      slope\n    } = this.state;\n    const transformDataNode = nodes.sort((a, b) => {\n      if (a.id > b.id) {\n        return 1;\n      }\n      return -1;\n    });\n    const isAllNodeHavePredict = nodes.every(\n      ({ predictAttitude }) => predictAttitude !== undefined\n    );\n    const scatterGraph = isAllNodeHavePredict\n      ? createScatterGraph(allRangeOfNodes, semiVarioGram, model, this.state.labelModel || \"Gussian Model\")\n      : false;\n    const x = getXYZ(transformDataNode, \"latitude\");\n    const y = getXYZ(transformDataNode, \"longtitude\");\n    const z = isAllNodeHavePredict ? getZ(transformDataNode, model) : [];\n\n    const error = isAllNodeHavePredict\n      ? getAllErrorModel(transformDataNode)\n      : false;\n\n    const trendlineData = isAllNodeHavePredict\n      ? getTrendlines(allRangeOfNodes, semiVarioGram[\"gaussian\"]).filter(([a, b]) => b !== 1)\n      : [];\n\n    const data = [[\"Distance\", \"Semivariance\"], ...trendlineData];\n    const options = {\n      title: \"Exponential Polynomial Trendline\",\n      legend: 'bottom',\n      crosshair: { trigger: \"both\", orientation: \"both\" },\n      trendlines: {\n        0: {\n          type: \"polynomial\",\n          degree: 3,\n          visibleInLegend: true,\n        },\n      },\n      vAxis: { title: 'Semivariance' },\n      hAxis: { title: 'Distance' },\n    };\n    const isDisabledSubmit = !variable.nugget && !variable.sill && !variable.range\n\n    return (\n      <div className=\"container-graph\">\n        {loading && (\n          <div className=\"modal\">\n            <Loader type=\"Puff\" color=\"#00BFFF\" height=\"100\" width=\"100\" />\n          </div>\n        )}\n\n        <div style={{ margin: \"15px\" }}>\n          <Link style={{ marginRight: \"15px\" }} to=\"/\">1 x 1 zone</Link>\n          <Link style={{ marginRight: \"15px\" }} to=\"/separate\">2 x 2 zones</Link>\n          <Link style={{ marginRight: \"15px\" }} to=\"/nine-separate\">3 x 3 zones</Link>\n          <Link to=\"/sixteen-separate\">4 x 4 zones</Link>\n          <h1>\n            {this.state.labelModel || \"Gussian Model\"}\n          </h1>\n          <div>\n            <h1>Model Selection</h1>\n\n            {\n              buttonList.map(({ label, model }) => {\n                return (\n                  <button onClick={this.handleChangeModel(label)} value={model}>\n                    {label}\n                  </button>\n                )\n              })\n            }\n\n          </div>\n          <h1>Node list</h1>\n          <input\n            name=\"nugget\"\n            placeholder=\"nugget\"\n            onChange={this.handleChangeValue}\n          />\n          <input\n            name=\"sill\"\n            placeholder=\"sill\"\n            onChange={this.handleChangeValue}\n          />\n          <input\n            name=\"range\"\n            placeholder=\"range\"\n            onChange={this.handleChangeValue}\n          />\n          <div className=\"input-node-title\">\n            <p className=\"node-p-id\">ID</p>\n            <p className=\"node-unit\">Latitude</p>\n            <p className=\"node-unit\">Longtitude</p>\n            <p className=\"node-unit\">Altitude</p>\n            <p className=\"node-unit\">Predicted Altitude</p>\n          </div>\n\n          {transformDataNode.map(\n            ({ id, latitude, longtitude, attitude, predictAttitude }) => {\n              return (\n                <div key={id + latitude.toString()} className=\"input-node\">\n                  <div className=\"id-node\">\n                    <p>{id}</p>\n                  </div>\n                  <div>\n                    <input\n                      onChange={this.onChangeNode(id)}\n                      name=\"latitude\"\n                      value={latitude || \"\"}\n                    ></input>\n                  </div>\n                  <div>\n                    <input\n                      onChange={this.onChangeNode(id)}\n                      name=\"longtitude\"\n                      value={longtitude || \"\"}\n                    ></input>\n                  </div>\n                  <div>\n                    <input\n                      onChange={this.onChangeNode(id)}\n                      name=\"attitude\"\n                      value={attitude || \"\"}\n                    ></input>\n                  </div>\n                  <div>\n                    <input\n                      onChange={this.onChangeNode(id)}\n                      name=\"predictAttitude\"\n                      value={isAllNodeHavePredict ? predictAttitude[model] : \"\"}\n                    ></input>\n                  </div>\n                  <div>\n                    <button id={id} onClick={this.deleteNodes}>\n                      Delete\n                    </button>\n                  </div>\n                </div>\n              );\n            }\n          )}\n\n          <input onChange={this.onChangeFile} type=\"file\"></input>\n          <button onClick={this.addNode}>ADD NODE</button>\n          <button onClick={this.onSubmit} disabled={isDisabledSubmit}>Submit</button>\n          {error && (\n            <ButtonExportExel\n              onSlopeChange={this.onSlopeChange}\n            />\n          )}\n        </div>\n\n        <div className=\"graph\">\n          {error && (\n            <>\n              <ErrorTable\n                error={error}\n                semiVarioGram={semiVarioGram}\n                variable={variable}\n              />\n\n              <NodeResultTable list={transformDataNode} />\n            </>\n          )}\n          {scatterGraph && (\n            <Plot\n              data={scatterGraph}\n              layout={{\n                width: 900,\n                height: 600,\n                title: \"Semivariogram Analysis\",\n                xaxis: {\n                  title: \"Distance\",\n                },\n                yaxis: {\n                  title: \"Semivariogram\",\n                },\n              }}\n            />\n          )}\n          {isAllNodeHavePredict ? (\n            <Plot\n              data={[\n                {\n                  x: x,\n                  y: y,\n                  z: z,\n                  type: \"mesh3d\",\n                  showscale: true,\n                  intensity: z,\n                  colorscale: [\n                    [0, 'rgb(0, 0, 255)'],\n                    [0.5, 'rgb(0, 128, 0)'],\n                    [1, 'rgb(255, 255, 0)']\n                  ],\n                  colorbar: {\n                    title: 'Predicted Altitude'\n                  },\n                },\n              ]}\n              layout={{\n                width: 900, height: 600, title: \"3D Surface Plots\",\n                scene: {\n                  aspectratio: {\n                    x: 1,\n                    y: 1,\n                    z: 0.5\n                  },\n                  zaxis: {\n                    title: 'Predicted Altitude',\n                    backgroundcolor: 'rgb(230,230,200)',\n                    showbackground: true,\n                    zerolinecolor: 'white',\n                    gridcolor: 'white',\n                    nticks: 20,\n\n\n                  },\n                  yaxis: {\n                    title: 'Longtitude',\n                    nticks: 10,\n                    backgroundcolor: 'rgb(230,230,200)',\n                    showbackground: true,\n                    zerolinecolor: 'white',\n                    gridcolor: 'white',\n                  },\n                  xaxis: {\n                    title: 'Latitude',\n                    nticks: 10,\n                    backgroundcolor: 'rgb(230,230,200)',\n                    showbackground: true,\n                    zerolinecolor: 'white',\n                    gridcolor: 'white',\n                  }\n                }\n              }}\n            />\n          ) : null}\n          {isAllNodeHavePredict ? (\n            <Plot\n              data={[\n                {\n                  x: x,\n                  y: y,\n                  z: z,\n                  intensity: z,\n                  type: \"contour\",\n                  contours: {\n                    showlabels: true,\n                    labelfont: {\n                      family: 'Raleway',\n                      size: 12,\n                      color: 'white',\n                    }\n                  },\n                  colorscale: [\n                    [0, 'rgb(0, 0, 255)'],\n                    [0.5, 'rgb(0, 128, 0)'],\n                    [1, 'rgb(255, 255, 0)']\n                  ],\n                  colorbar: {\n                    title: 'Predicted Altitude'\n                  },\n                },\n              ]}\n              layout={{\n                width: 900,\n                height: 600,\n                title: \"Contour Plots\",\n                scene: {\n                  aspectratio: {\n                    x: 1,\n                    y: 1,\n                    z: 0.5\n                  },\n                  zaxis: {\n                    title: 'Predicted Altitude',\n                    backgroundcolor: 'rgb(230,230,200)',\n                    showbackground: true,\n                    zerolinecolor: 'white',\n                    gridcolor: 'white',\n                    nticks: 20,\n\n\n                  },\n                  yaxis: {\n                    title: 'Longtitude',\n                    nticks: 10,\n                    backgroundcolor: 'rgb(230,230,200)',\n                    showbackground: true,\n                    zerolinecolor: 'white',\n                    gridcolor: 'white',\n                  },\n                  xaxis: {\n                    title: 'Latitude',\n                    nticks: 10,\n                    backgroundcolor: 'rgb(230,230,200)',\n                    showbackground: true,\n                    zerolinecolor: 'white',\n                    gridcolor: 'white',\n                  }\n                }\n              }}\n            />\n          ) : null}\n\n          {trendlineData.length > 0 && (\n            <Chart\n              chartType=\"ScatterChart\"\n              width=\"900px\"\n              height=\"600px\"\n              data={data}\n              options={options}\n              legendToggle\n            />\n          )}\n          <ZoneTable\n            zones={zones}\n            nodes={transformDataNode}\n            isShowConstant={\n              !!variable.nugget && !!variable.sill && !!variable.range\n            }\n            inputSlope={slope}\n            startTime={this.state.start}\n            endTime={this.state.end}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default NodeSixTeenZone;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n/* REDUX SET UP */\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux';\nimport reduxThunk from 'redux-thunk';\nimport reducers from './reducers'\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport Form from './pages/Form'\nimport Addnode from './pages/Addnode'\nimport ViewVariogram from './pages/ViewVariogram'\nimport NodeWithFourZone from './pages/NodeWithFourZone';\nimport NodeWithNineZone from './pages/NodeWithNineZone';\nimport NodeWithSixTeenZone from './pages/NodeWithSixTeenZone';\nconst createStoreWithMiddleware = applyMiddleware(reduxThunk)(createStore);\n//\nconst store = createStoreWithMiddleware(reducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\n/* REDUX SET UP */\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router>\n            <Route path=\"/\" exact component={Form} />\n            <Route path=\"/separate\" exact component={NodeWithFourZone} />\n            <Route path=\"/nine-separate\" exact component={NodeWithNineZone} />\n            <Route path=\"/sixteen-separate\" exact component={NodeWithSixTeenZone} />\n        </Router>\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}